{"/":{"title":"fx notes","content":"\nfx notes serves as a public *second brain* for some of my visual effects, proceduralism and deep learning related notes and experiments\n\nPress `Ctrl` + `K` to search for something \n\n### Content Lists\nIf you prefer browsing the contents of this site through a list instead of a graph, you can find content lists here too:\n\n- [All Notes](/notes)\n- [[notes/Houdini |Houdini]]\n- [[notes/Deep Learning |Deep Learning]]\n- [[notes/Projects and RnD |Projects / R\u0026D]]\n- [[notes/Resources |Resources]]\n- [[notes/Other |Other]]\n\n\n### About\n\nHi there!\n\nIm currently working as an FX TD and created this page to document and share workflows, ideas and notes about houdini and various other vfx topics as well as my recent deep learning adventures. \n\nThis is by no means a documentation or manual, but much more a digital personal notebook. That's why it's rather unstructured from time to time and also contains different summaries of already existing resources and tutorials. I try my best to link to any sources.\n\nThe quality of the notes may vary greatly and there is no garantuee for correctness.\n\nHit me up if you find any mistakes or know of better ways to do certain things.\n\nI hope you find something useful!\n","lastmodified":"2022-06-03T21:39:51.472613615Z","tags":null},"/.trash/Houdini":{"title":"","content":"","lastmodified":"2022-06-03T21:39:51.472613615Z","tags":null},"/notes/Abusing-Heightfields-as-Fast-Image-Canvas":{"title":"Abusing Heightfields as Fast Image Canvas","content":"\n### The Problem:\n\nA big part of getting a machine learning model to run is to prepare and import the data in the right _shape_. Usually this shape will be some n-dimensional [[notes/Tensors |Tensor]]. \n\nWhen working with 2D image data the files are read from disk. There are tons of tools and functions in most of the DL Frameworks that convert all sorts of files to correctly shaped tensors. In Houdini however, the data at hand is most likely not in a format (.jpg .png etc.) that can be extracted easily by a premade data loading solution.\n\nTo extract the data somewhat _liveish_ without having to write anything to disk and read it back in another step, a function that reads directly from houdini geometry is more efficient.\n\nThis brings us to the main issue: Where to store the data?\n\nUnfortunately storing image data on 3D geometry isn't very efficient. Polygon grids also store connectivity information and other data which make them rather slow to work with, especially when dealing with higher resolutions. \n\nTested when trying to do [[notes/Digit Recognition in Houdini |Digit Recognition in Houdini]].\n\n### The Solution:\n\n**Heightfields** or '2D-Volumes' (weird name). \n\nThey have a grid-like topology and only store a single value per voxel instead of unnecessary connectivity information or other data. \n\nHoudini also ships with a python function to extract voxel data quickly, which allows us to convert the 2D information into the necessary shape.\n\n```Python \n# this goes in a Python SOP\n\nimport hou\nimport numpy as np\n\nnode = hou.pwd()\ngeo = node.geometry()\n\nW = 128 # image width\nH = W   # image height\n\ncanvas = geo.prim(0) # reads the 0th primitive \n\ncanvasVoxels = canvas.allVoxels() # reads all voxel values as one big array [1, 2, ... , n]\n\ninput = np.asarray(canvasVoxels, dtype=np.float64)\ninput = input.reshape(W,H) # creates a tensor of shape [128,128,1]\n```\n\nSee [[notes/Towers From Sketch |Towers From Sketch]] to find out more about the applications of this technique.\n","lastmodified":"2022-06-03T21:39:51.472613615Z","tags":null},"/notes/Back-Propagation":{"title":"Back Propagation","content":"\n# Back Propagation\n\n\n\n","lastmodified":"2022-06-03T21:39:51.472613615Z","tags":null},"/notes/Convolutional-Neural-Networks-CNNs":{"title":"Convolutional Neural Networks (CNNs)","content":"\n### Architecture:\n\n### Kernels:\n\n\n![[notes/images/convkernel2CC.png]]\n\n![[notes/images/convkernel_2 1.png]]\n\nRelated: [[notes/Feed Forward Networks (FFNs) |Feed Forward Networks (FFNs)]], [[notes/Recurrent Neural Networks (RNNs) |Recurrent Neural Networks (RNNs)]], [[notes/Generative Adversarial Networks (GANs) |Generative Adversarial Networks (GANs)]] \n\n\n\n\n","lastmodified":"2022-06-03T21:39:51.472613615Z","tags":null},"/notes/Deep-Learning":{"title":"Deep Learning","content":"\n### ML Basics for Technical 3D Artists / TDs:\n##### Concepts:\n- [[notes/Tensors |Tensors]]\n- [[notes/Gradient Descent |Gradient Descent]]\n- [[notes/Back Propagation |Back Propagation]]\n\n##### Model Archtiectures\n- [[notes/Feed Forward Networks (FFNs) |Feed Forward Networks (FFNs)]]\n- [[notes/Convolutional Neural Networks (CNNs) |Convolutional Neural Networks (CNNs)]]\n- [[notes/Generative Adversarial Networks (GANs) |Generative Adversarial Networks (GANs)]]\n- [[notes/Recurrent Neural Networks (RNNs) |Recurrent Neural Networks (RNNs)]]\n\n##### Data\n- Data Synthesis\n- Data Augmentation\n- Noise\n\n##### Realistic Applications\n- Compress Algorithms\n- Increase Usabiliy \u0026 Accessability\n\n### Setup Guides:\n-  [[notes/Setting up Anaconda and Houdini for 3D Deep Learning on Linux |Setting up Anaconda and Houdini for 3D Deep Learning on Linux]]\n\n### Houdini DL \"Hacks\":\n- [[notes/Abusing Heightfields as Fast Image Canvas |Abusing Heightfields as Fast Image Canvas]]\n\n### Projects \u0026 Examples:\n- [[notes/Digit Recognition in Houdini |Digit Recognition in Houdini]]\n- Sketch to Tower\n- Vegetation \u0026 Erosion\n- Wave Function Collapse Prediction\n- Neural Cellular Automata","lastmodified":"2022-06-03T21:39:51.472613615Z","tags":null},"/notes/Digit-Recognition-in-Houdini":{"title":"Digit Recognition in Houdini","content":"\n![[notes/images/digitRec_Banner.gif]]\n\nthe files can be found here: [GitHub - Houdini + PyTorch Digit Recognition](https://github.com/jakobringler/houdini_pytorch_digitrecognition)\n\nsources / further reading:\n- [PyTorch Tutorial 13 - Feed-Forward Neural Network](https://www.youtube.com/watch?v=oPhxf2fXHkQ)\n- [4 pixel cam AI - Machine Learning in Houdini Tutorial](https://www.youtube.com/watch?v=WNEEokEq-Fg)","lastmodified":"2022-06-03T21:39:51.472613615Z","tags":null},"/notes/Feed-Forward-Networks-FFNs":{"title":"Feed Forward Networks (FFNs)","content":"\n### Architecture:\n\nRelated: [[notes/Convolutional Neural Networks (CNNs) |Convolutional Neural Networks (CNNs)]], [[notes/Recurrent Neural Networks (RNNs) |Recurrent Neural Networks (RNNs)]], [[notes/Generative Adversarial Networks (GANs) |Generative Adversarial Networks (GANs)]]\n\n\n\n\n","lastmodified":"2022-06-03T21:39:51.472613615Z","tags":null},"/notes/Generative-Adversarial-Networks-GANs":{"title":"Generative Adversarial Networks (GANs)","content":"\n### Architecture\n\nRelated: [[notes/Feed Forward Networks (FFNs) |Feed Forward Networks (FFNs)]], [[notes/Convolutional Neural Networks (CNNs) |Convolutional Neural Networks (CNNs)]], [[notes/Recurrent Neural Networks (RNNs) |Recurrent Neural Networks (RNNs)]] ","lastmodified":"2022-06-03T21:39:51.472613615Z","tags":null},"/notes/Gradient-Descent":{"title":"Gradient Descent","content":"\n![[notes/images/gradientDescent.png]]\nRelated: [[notes/Back Propagation |Back Propagation]]","lastmodified":"2022-06-03T21:39:51.472613615Z","tags":null},"/notes/Houdini":{"title":"Houdini","content":"### SOPs:\n\n### VEX:\n- [[notes/VEX Snippets |VEX Snippets]]\n- [[notes/Vector Shenanigans |Vector Shenanigans]]\n- [[notes/Matrix Operations |Matrix Operations]]\n- [[notes/Quaternions-Euler-Radians-Degrees |Quaternions \u0026 Euler, Radians \u0026 Degrees]]\n- [[notes/primuv and xyzdist |primuv \u0026 xyzdist]]\n\n### Deep Learning:\n- [[notes/Setting up Anaconda and Houdini for 3D Deep Learning on Linux |Setting up Anaconda and Houdini for 3D Deep Learning on Linux]]\n- [[notes/Abusing Heightfields as Fast Image Canvas |Abusing Heightfields as Fast Image Canvas]]\n\n### Misc:\n- [[notes/Op Operators |Op Operators]]","lastmodified":"2022-06-03T21:39:51.472613615Z","tags":null},"/notes/Impressum":{"title":"Impressum","content":"\n[[notes/Imprint |English Version]]\n\n\n\n","lastmodified":"2022-06-03T21:39:51.472613615Z","tags":null},"/notes/Imprint":{"title":"Imprint","content":"\n[[notes/Impressum |German Version]]\n\n","lastmodified":"2022-06-03T21:39:51.472613615Z","tags":null},"/notes/Matrix-Operations":{"title":"Matrix Operations","content":"\n# very WIP\n### Identity Matrix\n\n### Translation\n```C#\nvector t = chv('translate');\n\nmatrix T = set(set(1, 0, 0, 0), set(0, 1, 0, 0), set(0, 0, 1, 0), set(t.x, t.y, t.z, 1));\n\n@P *= T;\n```\n\n### Rotations\n\n```C#\nvector rot = radians(chv('rotate'));\n\nmatrix3 Rx = set(1,0,0, 0,cos(rot.x),-sin(rot.x), 0,sin(rot.x),cos(rot.x));\n\nmatrix3 Ry = set(cos(rot.y),0,sin(rot.y), 0,1,0, -sin(rot.y),0,cos(rot.y));\n\nmatrix3 Rz = set(cos(rot.z),-sin(rot.z),0, sin(rot.z),cos(rot.z),0 ,0,0,1);\n\n@P = @P*Rx*Ry*Rz;\n```\n\n### Permutations\n\n### Shear\n\n---\n\n### Extracting Transformation Matrix with VEX\nSometimes it's desirable to lock an animated mesh to the origin to perform further operations. To move it from it's position in world space to the origin we need it's transformation matrix.\n\n[Pawe≈Ç Rutkowski](https://vimeo.com/284712920) has a great video on the topic. The following is basically a writeup of the contents of his video for my own memory and to easily get back to it.\n\nTo create a transformation matrix we first have to create a local coordinate system that moves with the object. To do so we have to identify 2 Points that don't deform and calculate a vector between the two. First isolate the the 2 points by deleting everything else.\n\n![[notes/images/Pasted image 20220602234539.png]]\n\n```C#\n// this goes in point wrangle 1\n\nvector P1 = point(0, \"P\", 0);\nvector P2 = point(0, \"P\", 1);\nvector up = {0,1,0};\n\nvector X = normalize(P2-P1);\nvector Z = normalize(cross(X, up));\nvector Y = normalize(cross(X, Z));\n\nvector P = P1 + (P2 - P1) / 2;\n```\n$$\n\\begin{array}{rcl}\n\t\\color{red} x-Axis \\\\\n\t\\color{green} y-Axis \\\\\n\t\\color{blue} z-Axis \\\\\n\t\\color{orange} Position \\\\\n\\end{array}\n\\equiv\n\\bigg[\\begin{array}{rcl}\n\t\\color{red} 1\u0026\\color{red}0\u0026\\color{red}0\u00260 \\\\\n\t\\color{green}0\u0026\\color{green}1\u0026\\color{green}0\u00260 \\\\\n\t\\color{blue}0\u0026\\color{blue}0\u0026\\color{blue}1\u00260 \\\\\n\t\\color{orange}0\u0026\\color{orange}0\u0026\\color{orange}0\u00261 \\\\\n\\end{array}\\bigg]\n$$ \n\nWe don't really need the fourth column but 3x4 matrices dont \"exist\" in VEX. \n\n```C#\n// this continues the first point wrangle\n\nmatrix transform = set(X, Y, Z, P); // create matrix\n```\n\nHowever this will give us the following matrix with the ones in the fourth column\n\n\n$$\n\\bigg[\\begin{array}{rcl}\n\t\\color{red} X.x\u0026\\color{red}X.y\u0026\\color{red}X.z\u00261 \\\\\n\t\\color{green} Y.x\u0026\\color{green}Y.y\u0026\\color{green}Y.z\u00261 \\\\\n\t\\color{blue} Z.x\u0026\\color{blue}Z.y\u0026\\color{blue}Z.z\u00261 \\\\\n\t\\color{orange} P.x\u0026\\color{orange}P.y\u0026\\color{orange}P.z\u00261 \\\\\n\\end{array}\\bigg]\n$$\n\nTo fix this we can use the setcomp() function.\n\n```C#\n// this continues the first point wrangle\n\nsetcomp(transform, 0, 0, 3); // set row 1 col 4 to 0\nsetcomp(transform, 0, 1, 3); // set row 2 col 4 to 0\nsetcomp(transform, 0, 2, 3); // set row 3 col 4 to 0\n\n4@transform = transform; // create matrix attribute\n```\n\nWhich will give us the correct transformation matrix:\n\n$$\n\\bigg[\\begin{array}{rcl}\n\t\\color{red} X.x\u0026\\color{red}X.y\u0026\\color{red}X.z\u00260 \\\\\n\t\\color{green} Y.x\u0026\\color{green}Y.y\u0026\\color{green}Y.z\u00260 \\\\\n\t\\color{blue} Z.x\u0026\\color{blue}Z.y\u0026\\color{blue}Z.z\u00260 \\\\\n\t\\color{orange} P.x\u0026\\color{orange}P.y\u0026\\color{orange}P.z\u00261 \\\\\n\\end{array}\\bigg]\n$$\nto move the object to the center the inverted matrix has to be multiplied with the position.\n\n```C#\n// this goes in point wrangle 2\n\nmatrix transform = point(1, \"transform\", 0);\n\nv@P *= invert(transform);\nv@N *= matrix3(invert(transform));\nv@v *= matrix3(invert(transform));\n```\n\n##### Download: [File](https://github.com/jakobringler/blog/tree/hugo/content/notes/sharedfiles/ExtractTransformationMatrix.hiplc)\n\n--- \n\n### sources / further reading:\n- [Linear Transformations - 3Blue1Brown](https://www.3blue1brown.com/lessons/linear-transformations)\n- [Houdini Tutorial | Extracting transformation matrix with VEX - Pawe≈Ç Rutkowski](https://vimeo.com/284712920)\n- [Houdini Translate Rotate Scale Bend with Matrices \u0026 Quaternions in VEX - Nodes of Nature](https://www.youtube.com/watch?v=e9qLWS2La28)\n- [Matrix Transformation- Mohamad Salame](https://www.artstation.com/blogs/mohamad_salame1/v6eP/matrix-transformation)\n\n","lastmodified":"2022-06-03T21:39:51.472613615Z","tags":null},"/notes/Op-Operators":{"title":"Op Operators","content":"\n\"[Op Operators I will Never Memorize](https://www.artstation.com/blogs/mohamad_salame1/DlQG/op-operators-i-will-never-memorize)\" is a fantastic blog post by Mohamad Salame that summarizes all the obscurities and pitfalls when having to deal with `op` syntax.\n\n","lastmodified":"2022-06-03T21:39:51.472613615Z","tags":null},"/notes/Other":{"title":"Other","content":"\n### Nuke:\n\n### Color Grading:\n\n\n\n","lastmodified":"2022-06-03T21:39:51.472613615Z","tags":null},"/notes/Projects-and-RnD":{"title":"Projects / R\u0026D","content":"\n# Projects\n\n# R\u0026D\n\n### Deep Learning\n- [[notes/Digit Recognition in Houdini |Digit Recognition in Houdini]]","lastmodified":"2022-06-03T21:39:51.472613615Z","tags":null},"/notes/Quaternions-Euler-Radians-Degrees":{"title":"Quaternions \u0026 Euler, Radians \u0026 Degrees","content":"\n### Quaternions\n\nexpressed as 4 numbers `vector4 = [x, y, z, w]\n\nIt's usually used to define rotational transformation in 3D Space. To do so it needs 2 types of information: \n- rotational angle   $\\theta$\n- rotational axis   $A$ \n\nThe 4 vector values of a quaternion are calculated in the following way:\n\n$(sin(\\frac{\\theta}{2})*A.x, sin(\\frac{\\theta}{2})*A.y, sin(\\frac{\\theta}{2})*A.z, cos(\\frac{\\theta}{2}))$\n\nIn VEX we can use the quaternion function which accepts an angle in radians and an axis vector to propagate the vector4 accordingly.\n\n\n### Rotating Vectors\n\n```C#\n//this goes in a point wrangle\n\nfloat angle = chf(\"angle\");\nvector axis = normalize(chv(\"axis\"));\n\nvector4 rot = quaternion(radians(angle), axis);\n@P = qrotate(rot, @P);\n```\n\n### Euler Rotation\n\nWhile Quaternians define the rotational transformation with an angle around a specified axis, Euler rotation is defined by 3 Parameters (compare `Transform Node` x, y, z).\n\n\n### Blending Quaternions with `slerp()`\n\n### Sources /  further Reading:\n- [[VEX for Algorithmic Design] E14 _ Quaternion Basics](https://www.youtube.com/watch?v=MYRtwY-DQV8)\n\n### Related:\n- [[notes/Matrix Operations |Matrix Operations]]","lastmodified":"2022-06-03T21:39:51.472613615Z","tags":null},"/notes/Recurrent-Neural-Networks-RNNs":{"title":"Recurrent Neural Networks (RNNs)","content":"\n### Architecture\n\nRelated: [[notes/Feed Forward Networks (FFNs) |Feed Forward Networks (FFNs)]], [[notes/Convolutional Neural Networks (CNNs) |Convolutional Neural Networks (CNNs)]], [[notes/Generative Adversarial Networks (GANs) |Generative Adversarial Networks (GANs)]] \n\n\n\n","lastmodified":"2022-06-03T21:39:51.472613615Z","tags":null},"/notes/Resources":{"title":"Resources","content":"# Downloads \u0026 Scripts:\n[[notes/VEX Snippets |VEX Snippets]]\n\n# Links:\n\n## CG \u0026 VFX\n### Houdini:\n- [cgwiki - Matt Estela](https://www.tokeru.com/cgwiki/index.php?title=Houdini) all things houdini\n- [Entagma - Moritz Schwind \u0026 Manuel Casasola Merkle](https://entagma.com/) procedural \u0026 motion design\n- [VEX for Algorithmic Design - Junichiro Horikawa](https://www.youtube.com/playlist?list=PLzRzqTjuGIDhiXsP0hN3qBxAZ6lkVfGDI) VEX, procedural design\n- [procegen - Konstantin Magnus](https://procegen.konstantinmagnus.de/) procedural workflows, automation\n- [wiki - John Kunz](https://wiki.johnkunz.com/index.php?title=Main_Page) VEX, resources\n- [Toadstorm Nerdblog - Henry Foster](https://www.toadstorm.com/blog/) MOPs, procedural workflows \u0026 python\n- [Blog - Jake Rice](https://jakerice.design/blog/) VEX, math, technical\n- [Blog - Sergen Eren](https://sergeneren.com/) FX, technical, clouds, photon simulation\n- [FX Thinking - Alessandro Pepe](https://pepefx.blogspot.com/) FX, technical\n- [1 Minute VEX - Aaron Smith](https://aaronsmith.tv/1-Minute-VEX) VEX\n- [Houdini Tutorials Tailored for Mathematicians](http://wordpress.discretization.de/houdini/) math, technical\n- [Blog - Rok Andic](https://www.rokandic.com/blog) rigging, animation\n- [The Brain Extension - Iiro Kivist√∂](https://www.thebrainextension.com/) grooming, CFX\n- [Creature Garage - JesusFC](https://creaturegarage.com/) grooming\n\n### Other:\n\n## Math:\n- [Essence of Linear Algebra - 3Blue1Brown](https://www.3blue1brown.com/topics/linear-algebra) theory\n\n## Deep Learning\n### Houdini:\n- [Houdini Machine Learning - Edmond Boulet-Gilly](https://www.youtube.com/watch?v=WNEEokEq-Fg\u0026list=PLSie_1zkANDbn7wCD9kifPAp5wJmok02V) ML, PyTorch, technical\n\n### Theory:\n- [Aladdin Persson](https://www.youtube.com/c/AladdinPersson) theory, paper review, pytorch \u0026 tensorflow tutorials","lastmodified":"2022-06-03T21:39:51.472613615Z","tags":null},"/notes/Setting-up-Anaconda-and-Houdini-for-3D-Deep-Learning-on-Linux":{"title":"Setting up Anaconda and Houdini for 3D Deep Learning on Linux","content":"\n### Installation:\n\nTo get started install [Anaconda](https://anaconda.org/) and run the following commands in your terminal:\n\n( **hou** is the name of the new enviroment and python **3.7.4** is required because this is the version used in Houdini )\n\n```bash\nconda create -n hou python=3.7.4\n```\n\n```bash\nconda activate hou\n```\n\nThen install libraries like for example [PyTorch 3D](https://github.com/facebookresearch/pytorch3d). ( For simplicities sake we will go forward with vanilla [PyTorch](https://pytorch.org/). )\n\n```bash\nconda install pytorch torchvision torchaudio cudatoolkit=11.3 -c pytorch\n```\n\nAs [jpparkeramnh](https://www.sidefx.com/profile/jpparkeramnh/) pointed out in [this](https://www.sidefx.com/forum/topic/58397/) SideFX forum post you have to export the **LD_PRELOAD** variable.\n\n```bash\nexport LD_PRELOAD=$CONDA_PREFIX/lib/libpython3.7m.so\n```\n\n### .bashrc Modifications:\n\nI also recommend sourcing Houdini in the terminal.\n\nTo do so first open the .bashrc in the terminal\n\n```bash\nnano .bashrc\n```\n\nand add the following lines to your .bashrc\n\n```bash\ncd /opt/hfs19.0/\nsource ./houdini_setup\ncd ~\nconda activate hou\nexport LD_PRELOAD=$CONDA_PREFIX/lib/libpython3.7m.so\nalias expenv='LD_PRELOAD=$CONDA_PREFIX/lib/libpython3.7m.so'\n```\n\n-   The first 3 lines run the houdini setup bash script\n-   Line 4 activates a default environment ( for me ‚Äúhou‚Äù )\n-   Line 5 exports the LD_PRELOAD varible of the currently activated environment ( hou )\n-   Line 6 creates an alias to export the currently activated environment from the terminal\n\nNow you should be able to just activate your respecitve conda environment, export the correct LD_PRELOAD variable by typing ‚Äú**expenv**‚Äù and then run houdini from there by typing ‚Äú**houdini**‚Äú.\n\nTo check if everything is running as expected open the Houdini Python shell and type:\n\n```python\nimport torch \n```\n\nIf it doesn‚Äôt give you any errors you should be good to go.\n\n\n","lastmodified":"2022-06-03T21:39:51.472613615Z","tags":null},"/notes/Tensors":{"title":"Tensors","content":"\n### What are \"Tensors\"?\n\n\n![[notes/images/tensordims.png]]\n\n### Image Tensors:\n![[notes/images/imagetensor.png]]\n","lastmodified":"2022-06-03T21:39:51.472613615Z","tags":null},"/notes/VEX-Snippets":{"title":"VEX Snippets","content":"\n# Wrangle Cheat Sheet\n\u003eI try my best to credit and link to any sources. That being said, some of those are pretty old and I have no idea where they came from.\n\u003e\n\u003eI recommend installing this handy python panel to manage your own snippet collection: [Vex Snippet Library](https://github.com/dchow1992/Vex_Snippet_Library)\n\n### Attribute Min Max\n```C\nfloat value;\nfloat values[];\nstring attrname = \"name\";\nfloat max_value;\nfloat min_value;\n\nfor (int i=0; i\u003c@numpt; i++)\n{\n\tvalue = point(geoself(), attrname, i);\n\tappend(values,value);\n}\n\nmin_value = min(values);\nmax_value = max(values);\n\nf[]@range;\n\n@range[0] = min_value;\n@range[1] = max_value;\n```\n\n### Attribute to String\n```C\ns@name = \"piece_\" + itoa(i@class);\n```\n\n### Attribute Transfer\n```C\nint posprim;\nvector param_uv;\nfloat maxdist = 10;\nfloat dist = xyzdist(1,@P,posprim,param_uv,maxdist);\nvector pos = primuv(1,\"rest\",posprim,param_uv);\nv@rest = pos;\n```\n\n### Average Point Cloud Positions\n```C\nvector value;\nvector values[];\n\nfor (int i=0; i\u003c@numpt; i++)\n{\n\tvalue = point(geoself(), \"P\", i);\n\tappend(values,value);\n}\n  \nvector avgP = avg(values);\n\nif(@ptnum\u003e0)\n{\n\tremovepoint(geoself(), @ptnum);\n} \n\n@P = avgP;\n```\n\n### Bias and Gain\n```C\nfunction float bias(float val; float bias) \n{\n    return (val / ((((1.0/bias) - 2.0)*(1.0 - val))+1.0));\n}\n\nfunction float gain(float val; float gain) \n{\n    if(val \u003c 0.5)\n    {\n        return bias(val * 2.0,gain)/2.0;\n    }\n    else\n    {\n        return bias(val * 2.0 - 1.0,1.0 - gain)/2.0 + 0.5;\n    }\n}\n\nfloat val = pow(val, exp); \n```\n\nSources:\n- [Michael Frederickson's Tweet](https://twitter.com/mfrederickson/status/1523148417349816320)\n- [Alan Wolfe's Blog Post](https://blog.demofox.org/2012/09/24/bias-and-gain-are-your-friend/)\n\n### Bounding Box\n```C\nvector bbox = getbbox_size(0);\nvector bbox_max = getbbox_max(0);\nvector bbox_min = getbbox_min(0);\nvector bbox_center = getbbox_center(0);\n  \nfloat xsize = getbbox_size(0).x;\nfloat y_max = getbbox_max(0).y;\nfloat z_min = getbbox_min(0).z;\n```\n\n### Calculate Point Density\n```C\nfloat maxdist = chf(\"maxdist\");\nint maxpts = chi(\"maxpts\");\nint points = len(nearpoints, 0, @P, maxdist, maxpts);\n\nf@density = float(points) / maxpts;\n```\n\n### Create Name Attribute for each Prim Group\n```C\nstring grps[] = detailintrinsic(0, 'primitivegroups');\nforeach(string g; grps)\n{\n\taddprimattrib(0, g, 123);\n}\n```\n\n### Collision Check and Deintersection with SDF VDB\n```C\nvector gradient = volumegradient(1, \"surface\", v@P); \nfloat surface = volumesample(1, \"surface\", v@P);\n\nif(surface \u003c chf(\"dist\"))\n{\n\tv@P += normalize(gradient) * abs(surface);\n}\n```\n\n### Edgefalloff\n```C\nif (@edgefalloff==1)\n{\n\tint near[] = nearpoints(0,@P,chf(\"dist\"));\n\t\n\tforeach (int pnt;near)\n\t{\n\t\tvector pntP = point(0,\"P\",pnt);\n\t\tfloat dist = fit(distance(pntP,@P),0,chf(\"dist\")*2,1,-1);\n\t\tsetpointattrib(0,\"edgefalloff\",pnt,dist,\"set\");\n\t}\n}\n```\n\n### Expand Group Over Geo\n```C\nint pc = pcopen(0, 'P', @P, chf('radius'), chi('maxpts'));\n\nwhile (pciterate(pc) \u003e 0)\n{\n\tint currentpt;\t\n\tpcimport(pc, 'point.number', currentpt);\n\tsetpointgroup(0, 'group1', currentpt, 1);\n}\n```\n\n### Extract Tranformation Matrix\n```C\nvector P1 = point(0, \"P\", 0);\nvector P2 = point(0, \"P\", 1);\nvector up = {0,1,0};\n\nvector X = normalize(P2-P1);\nvector Z = normalize(cross(up, X));\nvector Y = normalize(cross(X, Z));\n\nvector P = P1 + (P2 - P1) / 2;\n\nmatrix transform = set(X, Y, Z, P);\n\nsetcomp(transform, 0, 0, 3); \nsetcomp(transform, 0, 1, 3);\nsetcomp(transform, 0, 2, 3); \n\n4@transform = transform;\n```\n\nHave a look at [[notes/Matrix Operations |this note]] for more information on how it's used.\n\n### Group by N Connections\n```C\nint n = chi(\"Neighbours\");\n\nif (neighbourcount (0, @ptnum) \u003e n)\n{\n\tsetpointgroup (0, \"grouped\", @ptnum, 1);\n}\n```\n\n### Isolate Overlapping Points\n```C\nint near[] = pcfind(0, \"P\", @P, 0.0001, 2);\n\nif(len(near) \u003e 1)\n{\n\tsetpointgroup(0, \"double\", @ptnum, 1);\n}\n```\n\n### Orientation Template for Copy\n```C\n@up = {0,1,0};\n@orient = quaternion(maketransform(@N,@up));\nvector4 rot_Y = quaternion(radians(ch('Y')),{0,1,0});\n@orient = qmultiply(@orient, rot_Y);\n```\n\n### Remove Point by Condition\n[Mai Ao](https://twitter.com/aomai01) compared two point deletion methods, where method 1 gives a 15x speed increase over the traditional `removepoint()` function\n\n1. group points first and blast group in another step\n\n```C\nfloat half_cone_rad = radians(chf(\"half_cone\"));\n@group_to_delete = acos(dot(@P, {0,0,1})) \u003c= half_cone_rad;\n```\n\n2. removepoint()\n\n```C\nfloat half_cone_rad = radians(chf(\"half_cone\"));\n\nif(acos(dot(@P, {0,0,1})) \u003c= half_cone_rad)\n{\n\tremovepoint(0, @ptnum);\n}\n```\n\nSources:\n- [Mai Ao's Tweet](https://twitter.com/aomai01/status/1514226273794641925/photo/1)\n\n### Remove Point Percentage\n```C\nint percentage = ch('percentage'); \n\nif(@ptnum % 100 \u003c percentage)\n{\n\tremovepoint(0, @ptnum );\n}\n```\n\n### Rotate Vector\n```C\nfloat angle = chf(\"angle\");\nvector axis = normalize(chv(\"axis\"));\n\nvector4 rot = quaternion(radians(angle), axis);\n@P = qrotate(rot, @P);\n```\n\n### Translate, Rotate, Scale \u0026 Bend\n```C\nvector t = chv('translate');\nvector r = radians(chv('rotate_before'));\nvector rot = radians(chv('rotate_after'));\nvector s = chv('scale');\nmatrix xform = detail(0,'xform');\n\nif(determinant(xform) == 0) xform = ident(); //initialize xform if not found\n\n//Scaling\nmatrix3 S = set(set(s.x, 0, 0), set(0, s.y, 0), set(0, 0, s.z));\n\n//General Rotation Before\nmatrix3 R = set( cos(r.b)*cos(r.g), cos(r.b)*sin(r.g)*sin(r.r)-sin(r.b)*cos(r.r), cos(r.b)*sin(r.g)*cos(r.r)+sin(r.b)*sin(r.r),\n                 sin(r.b)*cos(r.g), sin(r.b)*sin(r.g)*sin(r.r)+cos(r.b)*cos(r.r), sin(r.b)*sin(r.g)*cos(r.r)-cos(r.b)*sin(r.r),\n                 -sin(r.g), cos(r.g)*sin(r.r), cos(r.g)*cos(r.r) );\n\n//Translation\nmatrix T = set(set(1, 0, 0, 0), set(0, 1, 0, 0), set(0, 0, 1, 0), set(t.x, t.y, t.z, 1));\n\n//Basic Rotation After\n\nmatrix3 Rx = set(1,0,0, 0,cos(rot.x),-sin(rot.x), 0,sin(rot.x),cos(rot.x));\nmatrix3 Ry = set(cos(rot.y),0,sin(rot.y), 0,1,0, -sin(rot.y),0,cos(rot.y));\nmatrix3 Rz = set(cos(rot.z),-sin(rot.z),0, sin(rot.z),cos(rot.z),0 ,0,0,1);\nmatrix3 Rxyz = Rx*Ry*Rz;\n\n//Bend\n\nvector bendaxis = chv('Bend_Axis');\nvector min = getbbox_min(0);\nvector max = getbbox_max(0);\nfloat grad;\n\nif(chi('bend_coord') == 0)\n{\n    grad = fit(@P.x, min.x, max.x, 0, 1);\n}\n\nelse if(chi('bend_coord') == 1)\n{\n    grad = fit(@P.y, min.y, max.y, 0, 1);\n}\n\nelse\n{\n    grad = fit(@P.z, min.z, max.z, 0, 1);\n}\n\nfloat angle = chf('bend') *pow(chramp('BendRamp',grad), 1+chf('bend_power'));\nvector4 quat = quaternion(radians(angle), bendaxis);\n@P = qrotate(quat, @P);\n\n//Rotate around axis at Centroid\n\nmatrix mtx1 = ident(); \nvector axis = normalize(chv('axis'));\nfloat ang = radians(chf('angle'));\nrotate(mtx1, ang, axis);\n\n//Matrix Multiplication\n\nmatrix mtx2 = invert(xform)*S*mtx1*xform*R*T*Rxyz; //order matters\n@P *= mtx2;\n\n//store in xform detail\n\nsetdetailattrib(0, 'xform', xform*mtx2, 'set');\n```\n\nSources:\n- [Houdini Translate Rotate Scale Bend with Matrices \u0026 Quaternions in VEX - Nodes Of Nature](https://www.youtube.com/watch?v=e9qLWS2La28)\n- [Mohamad Salame's ArtStation](https://www.artstation.com/blogs/mohamad_salame1/OQNX/translate-rotate-scale-bend-with-matrices-quaternions-in-vex)","lastmodified":"2022-06-03T21:39:51.472613615Z","tags":null},"/notes/Vector-Shenanigans":{"title":"Vector Shenanigans","content":"\ncoming soon","lastmodified":"2022-06-03T21:39:51.476613614Z","tags":null},"/notes/primuv-and-xyzdist":{"title":"primuv and xyzdist","content":"\n### sources / further reading:\n- [The joy of xyzdist() and primuv() - Toadstorm](https://www.toadstorm.com/blog/?p=465)\n- [Joy Of Vex 19 - cgwiki](https://www.tokeru.com/cgwiki/index.php?title=JoyOfVex19) \n- [1 Minute VEX II - Aaron Smith](https://aaronsmith.tv/1-Minute-VEX-II)\n\n\n","lastmodified":"2022-06-03T21:39:51.532613608Z","tags":null}}