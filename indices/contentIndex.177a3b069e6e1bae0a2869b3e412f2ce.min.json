{"/":{"title":"fx notes","content":"\nfx notes serves as a public *second brain* for some of my visual effects, proceduralism and deep learning related notes and experiments\n\nPress `Ctrl` + `K` to search for something \n\nYou can use the interactive graph to browse the site and discover connections between notes\n\n### Content Lists\nIf you prefer browsing the contents of this site through a list instead of a graph, you can find content lists here too:\n\n- [All Notes](/notes)\n- [[notes/Houdini |Houdini]]\n- [[notes/Deep Learning |Deep Learning]]\n- [[notes/Projects and RnD |Projects / R\u0026D]]\n- [[notes/Resources |Resources]]\n- [[notes/Other |Other]]\n\n\n### About\n\nHi there!\n\nIm currently working as an FX TD and created this page to document and share workflows, ideas and notes about houdini and various other vfx topics as well as my recent deep learning adventures. \n\nThis is by no means a documentation or manual, but much more a digital personal notebook. That's why it's rather unstructured from time to time and also contains different summaries of already existing resources and tutorials. I try my best to link to any sources. The quality of the notes may vary greatly and there is no garantuee for correctness.\n\nHit me up if you find any mistakes or know of better ways to do certain things.\n\nI hope you find something useful!\n\nBest,\n\nJakob\n","lastmodified":"2022-07-02T22:25:11.454859907Z","tags":null},"/.trash/Houdini":{"title":"","content":"","lastmodified":"2022-07-02T22:25:11.454859907Z","tags":null},"/notes/Abusing-Heightfields-as-Fast-Image-Canvas":{"title":"Abusing Heightfields as Fast Image Canvas","content":"\n### The Problem\n\nA big part of getting a machine learning model to run is to prepare and import the data in the right _shape_. Usually this shape will be some n-dimensional [[notes/Tensors |Tensor]]. \n\nWhen working with 2D image data the files are read from disk. There are tons of tools and functions in most of the DL Frameworks that convert all sorts of files to correctly shaped tensors. In Houdini however, the data at hand is most likely not in a format (.jpg .png etc.) that can be extracted easily by a premade data loading solution.\n\nTo extract the data somewhat _liveish_ without having to write anything to disk and read it back in another step, a function that reads directly from houdini geometry is more efficient.\n\nThis brings us to the main issue: Where to store the data?\n\nUnfortunately storing image data on 3D geometry isn't very efficient. Polygon grids also store connectivity information and other data which make them rather slow to work with, especially when dealing with higher resolutions. \n\nTested when trying to do [[notes/Digit Recognition in Houdini |Digit Recognition in Houdini]].\n\n### The Solution\n\n**Heightfields** or '2D-Volumes' (weird name). \n\nThey have a grid-like topology and only store a single value per voxel instead of unnecessary connectivity information or other data. \n\nHoudini also ships with a python function to extract voxel data quickly, which allows us to convert the 2D information into the necessary shape.\n\n```Python \n# this goes in a Python SOP\n\nimport hou\nimport numpy as np\n\nnode = hou.pwd()\ngeo = node.geometry()\n\nW = 128 # image width\nH = W   # image height\n\ncanvas = geo.prim(0) # reads the 0th primitive \n\ncanvasVoxels = canvas.allVoxels() # reads all voxel values as one big array [1, 2, ... , n]\n\ninput = np.asarray(canvasVoxels, dtype=np.float64)\ninput = input.reshape(W,H) # creates a tensor of shape [128,128,1]\n```\n\nSee [[notes/Towers From Sketch |Towers From Sketch]] to find out more about the applications of this technique.\n","lastmodified":"2022-07-02T22:25:11.454859907Z","tags":null},"/notes/Back-Propagation":{"title":"Back Propagation","content":"\n# Back Propagation\n\n\n\n","lastmodified":"2022-07-02T22:25:11.454859907Z","tags":null},"/notes/Convolutional-Neural-Networks-CNNs":{"title":"Convolutional Neural Networks (CNNs)","content":"\n### Architecture\n\n### Kernels\n\n\n![[notes/images/convkernel2CC.png]]\n\n![[notes/images/convkernel_2 1.png]]\n\nRelated: [[notes/Feed Forward Networks (FFNs) |Feed Forward Networks (FFNs)]], [[notes/Recurrent Neural Networks (RNNs) |Recurrent Neural Networks (RNNs)]], [[notes/Generative Adversarial Networks (GANs) |Generative Adversarial Networks (GANs)]] \n\n\n\n\n","lastmodified":"2022-07-02T22:25:11.454859907Z","tags":null},"/notes/Deep-Learning":{"title":"Deep Learning","content":"\n### ML Basics for Technical 3D Artists / TDs\n##### Concepts\n- [[notes/Tensors |Tensors]]\n- [[notes/Gradient Descent |Gradient Descent]]\n- [[notes/Back Propagation |Back Propagation]]\n\n##### Model Archtiectures\n- [[notes/Feed Forward Networks (FFNs) |Feed Forward Networks (FFNs)]]\n- [[notes/Convolutional Neural Networks (CNNs) |Convolutional Neural Networks (CNNs)]]\n- [[notes/Generative Adversarial Networks (GANs) |Generative Adversarial Networks (GANs)]]\n- [[notes/Recurrent Neural Networks (RNNs) |Recurrent Neural Networks (RNNs)]]\n\n##### Data\n- Data Synthesis\n- Data Augmentation\n- Noise\n\n##### Realistic Applications\n- Compress Algorithms\n- Increase Usabiliy \u0026 Accessability\n\n### Setup Guides\n-  [[notes/Setting up Anaconda and Houdini for 3D Deep Learning on Linux |Setting up Anaconda and Houdini for 3D Deep Learning on Linux]]\n\n### Houdini DL \"Hacks\"\n- [[notes/Abusing Heightfields as Fast Image Canvas |Abusing Heightfields as Fast Image Canvas]]\n\n### Projects \u0026 Examples\n- [[notes/Digit Recognition in Houdini |Digit Recognition in Houdini]]\n- [[notes/Tower Sketcher |Tower Sketcher]]\n- [[notes/Vegetation Erosion Prediction |Vegetation \u0026 Erosion Prediction]]\n- Wave Function Collapse Prediction\n- Neural Cellular Automata","lastmodified":"2022-07-02T22:25:11.454859907Z","tags":null},"/notes/Digit-Recognition-in-Houdini":{"title":"Digit Recognition in Houdini","content":"\n![[notes/images/digitRec_Banner.gif]]\n\nthe files can be found here: [GitHub - Houdini + PyTorch Digit Recognition](https://github.com/jakobringler/houdini_pytorch_digitrecognition)\n\n### sources / further reading:\n- [PyTorch Tutorial 13 - Feed-Forward Neural Network](https://www.youtube.com/watch?v=oPhxf2fXHkQ)\n- [4 pixel cam AI - Machine Learning in Houdini Tutorial](https://www.youtube.com/watch?v=WNEEokEq-Fg)","lastmodified":"2022-07-02T22:25:11.454859907Z","tags":null},"/notes/Feed-Forward-Networks-FFNs":{"title":"Feed Forward Networks (FFNs)","content":"\n### Architecture\n\nRelated: [[notes/Convolutional Neural Networks (CNNs) |Convolutional Neural Networks (CNNs)]], [[notes/Recurrent Neural Networks (RNNs) |Recurrent Neural Networks (RNNs)]], [[notes/Generative Adversarial Networks (GANs) |Generative Adversarial Networks (GANs)]]\n\n\n\n\n","lastmodified":"2022-07-02T22:25:11.454859907Z","tags":null},"/notes/Generative-Adversarial-Networks-GANs":{"title":"Generative Adversarial Networks (GANs)","content":"\n### Architecture\n\nRelated: [[notes/Feed Forward Networks (FFNs) |Feed Forward Networks (FFNs)]], [[notes/Convolutional Neural Networks (CNNs) |Convolutional Neural Networks (CNNs)]], [[notes/Recurrent Neural Networks (RNNs) |Recurrent Neural Networks (RNNs)]] ","lastmodified":"2022-07-02T22:25:11.454859907Z","tags":null},"/notes/Gradient-Descent":{"title":"Gradient Descent","content":"\n![[notes/images/gradientDescent.png]]\nRelated: [[notes/Back Propagation |Back Propagation]]","lastmodified":"2022-07-02T22:25:11.454859907Z","tags":null},"/notes/Houdini":{"title":"Houdini","content":"### SOPs\n\n### VEX\n- [[notes/VEX Snippets |VEX Snippets]]\n- [[notes/Numbers |Numbers]]\n- [[notes/Vector Shenanigans |Vector Shenanigans]]\n- [[notes/Quaternion-Euler-Rotations |Quaternion \u0026 Euler Rotations]]\n- [[notes/Matrix Operations |Matrix Operations]]\n- [[notes/primuv and xyzdist |primuv \u0026 xyzdist]]\n\n### Deep Learning\n- [[notes/Setting up Anaconda and Houdini for 3D Deep Learning on Linux |Setting up Anaconda and Houdini for 3D Deep Learning on Linux]]\n- [[notes/Abusing Heightfields as Fast Image Canvas |Abusing Heightfields as Fast Image Canvas]]\n\n### Misc\n- [[notes/Op Operators |Op Operators]]","lastmodified":"2022-07-02T22:25:11.454859907Z","tags":null},"/notes/Impressum":{"title":"Impressum","content":"\n[[notes/Imprint |English Version]]\n\n\n\n","lastmodified":"2022-07-02T22:25:11.454859907Z","tags":null},"/notes/Imprint":{"title":"Imprint","content":"\n[[notes/Impressum |German Version]]\n\n","lastmodified":"2022-07-02T22:25:11.454859907Z","tags":null},"/notes/Matrix-Operations":{"title":"Matrix Operations","content":"\n# Basics\n\n### Dimensions\n\nHoudini most commonly uses 3x3 or 4x4 matrices to store transformation data\n\n3x3 -\u003e rotation and scale\n4x4 -\u003e rotation, scale and translation\n\n### Identity Matrix\n\nThe identity matrix is sort of the base matrix and means no transformation is applied. The diagonal ones store the scale value.\n\n$$\n\\bigg[\\begin{array}{rcl}\n\t1\u00260\u00260\u00260 \\\\\n\t0\u00261\u00260\u00260 \\\\\n\t0\u00260\u00261\u00260 \\\\\n\t0\u00260\u00260\u00261 \\\\\n\\end{array}\\bigg]\n$$\n\nIt can be created in VEX by calling `ident()`.\n\n```C#\nmatrix xform = ident();\n```\n\n### Translation\n\n```C#\nmatrix xform = ident();\nvector translation = chv(\"translation\");\n\ntranslate(xform, translation);\n\n@P *= xform;\n```\n\nThis is what happens under the hood:\n\n```C#\nvector t = chv('translate');\n\nmatrix T = set(set(1, 0, 0, 0), set(0, 1, 0, 0), set(0, 0, 1, 0), set(t.x, t.y, t.z, 1));\n\n@P *= T;\n```\n\n### Rotations\n\nQuaternion Rotations\n\n```C#\nmatrix xform = ident();\nfloat angle = radians(chf(\"angle\"));\nvector axis = chv(\"axis\");\n\nrotate(xform, angle, axis);\n\n@P *= xform;\n```\n\nEuler Rotations\n\n```C#\nvector rot = radians(chv('rotate'));\n\nmatrix3 Rx = set(1,0,0, 0,cos(rot.x),-sin(rot.x), 0,sin(rot.x),cos(rot.x));\n\nmatrix3 Ry = set(cos(rot.y),0,sin(rot.y), 0,1,0, -sin(rot.y),0,cos(rot.y));\n\nmatrix3 Rz = set(cos(rot.z),-sin(rot.z),0, sin(rot.z),cos(rot.z),0 ,0,0,1);\n\n@P = @P*Rx*Ry*Rz;\n```\n\nfor more details have a look at [[notes/Quaternion-Euler-Rotations |Quaternions and Euler Rotations]]\n\n### Scale\n\n```C#\nmatrix xform = ident();\nvector scale = chv(\"scale\");\n\nscale(xform, scale);\n\n@P *= xform;\n```\n\n### Order of Operations for Transformations\n\nThe default of the transform node and in most 3D packages ist `SRT`, which means first **Scaling** the object in place and then **Rotating** it before **Translating** it's position.\n\n### Permutations\n\n### Shear\n\n---\n\n# Usecases\n\n### Extracting a Transformation Matrix with VEX\n\nSometimes it's desirable to lock an animated mesh to the origin to perform further operations. To move it from it's position in world space to the origin we need it's transformation matrix.\n\n[Paweł Rutkowski](https://vimeo.com/284712920) has a great video on the topic. The following is basically a writeup of the contents of his video for my own memory and to easily get back to it.\n\nTo create a transformation matrix we first have to create a local coordinate system that moves with the object. To do so we have to identify 2 Points that don't deform and calculate a vector between the two. First isolate the the 2 points by deleting everything else.\n\n![[notes/images/Pasted image 20220602234539.png]]\n\n```C#\n// this goes in point wrangle 1\n\nvector P1 = point(0, \"P\", 0);\nvector P2 = point(0, \"P\", 1);\nvector up = {0,1,0};\n\nvector X = normalize(P2-P1);\nvector Z = normalize(cross(X, up));\nvector Y = normalize(cross(X, Z));\n\nvector P = P1 + (P2 - P1) / 2;\n```\n$$\n\\begin{array}{rcl}\n\t\\color{red} x-Axis \\\\\n\t\\color{green} y-Axis \\\\\n\t\\color{blue} z-Axis \\\\\n\t\\color{orange} Position \\\\\n\\end{array}\n\\equiv\n\\bigg[\\begin{array}{rcl}\n\t\\color{red} 1\u0026\\color{red}0\u0026\\color{red}0\u00260 \\\\\n\t\\color{green}0\u0026\\color{green}1\u0026\\color{green}0\u00260 \\\\\n\t\\color{blue}0\u0026\\color{blue}0\u0026\\color{blue}1\u00260 \\\\\n\t\\color{orange}0\u0026\\color{orange}0\u0026\\color{orange}0\u00261 \\\\\n\\end{array}\\bigg]\n$$ \n\nWe don't really need the fourth column but 3x4 matrices dont \"exist\" in VEX. \n\n```C#\n// this continues the first point wrangle\n\nmatrix transform = set(X, Y, Z, P); // create matrix\n```\n\nHowever this will give us the following matrix with the ones in the fourth column\n\n\n$$\n\\bigg[\\begin{array}{rcl}\n\t\\color{red} X.x\u0026\\color{red}X.y\u0026\\color{red}X.z\u00261 \\\\\n\t\\color{green} Y.x\u0026\\color{green}Y.y\u0026\\color{green}Y.z\u00261 \\\\\n\t\\color{blue} Z.x\u0026\\color{blue}Z.y\u0026\\color{blue}Z.z\u00261 \\\\\n\t\\color{orange} P.x\u0026\\color{orange}P.y\u0026\\color{orange}P.z\u00261 \\\\\n\\end{array}\\bigg]\n$$\n\nTo fix this we can use the setcomp() function.\n\n```C#\n// this continues the first point wrangle\n\nsetcomp(transform, 0, 0, 3); // set row 1 col 4 to 0\nsetcomp(transform, 0, 1, 3); // set row 2 col 4 to 0\nsetcomp(transform, 0, 2, 3); // set row 3 col 4 to 0\n\n4@transform = transform; // create matrix attribute\n```\n\nWhich will give us the correct transformation matrix:\n\n$$\n\\bigg[\\begin{array}{rcl}\n\t\\color{red} X.x\u0026\\color{red}X.y\u0026\\color{red}X.z\u00260 \\\\\n\t\\color{green} Y.x\u0026\\color{green}Y.y\u0026\\color{green}Y.z\u00260 \\\\\n\t\\color{blue} Z.x\u0026\\color{blue}Z.y\u0026\\color{blue}Z.z\u00260 \\\\\n\t\\color{orange} P.x\u0026\\color{orange}P.y\u0026\\color{orange}P.z\u00261 \\\\\n\\end{array}\\bigg]\n$$\nto move the object to the center the inverted matrix has to be multiplied with the position.\n\n```C#\n// this goes in point wrangle 2\n\nmatrix transform = point(1, \"transform\", 0);\n\nv@P *= invert(transform);\nv@N *= matrix3(invert(transform));\nv@v *= matrix3(invert(transform));\n```\n\n##### Download: [File](https://github.com/jakobringler/blog/tree/hugo/content/notes/sharedfiles/ExtractTransformationMatrix.hiplc)\n\n--- \n\n# Warping Space\n\n### Twisting\n\n![[notes/images/MatrixTwist.gif]]\n\n```C#\nmatrix xform = ident();\nvector bbox = getbbox_size(0);\nvector center = getbbox_center(0);\nvector axis = chv(\"axis\");\n\nfloat min = center.z - bbox.z / 2;\nfloat max = center.z + bbox.z / 2;\n\nfloat rotations = chf(\"rotations\");\n\nfloat angle = fit(@P.z, min, max, -PI*rotations, PI*rotations);\n\nrotate(xform, angle, axis);\n\n@P *= xform;\n```\n\n### Black Hole Vortex\n\nJohn Kunz demonstrated this technique in his [Pure VEX Workshop Week 6](https://www.youtube.com/watch?v=DA0ZuIJ-W7s). \n\n![[notes/images/Pasted image 20220604182753.png]]\n\n```C#\nmatrix xform = ident();\n\nvector angle = (1.0 / exp(length(@P)))*chv(\"rotationscale\");\nfloat scale = pow(1 - 1 / exp(length(@P)), 5);\nvector translatedir = chv(\"translatedir\")*chf(\"translatescale\");\nvector translate = set(translatedir.x, translatedir.y, translatedir.z) / exp(length(@P));\n\nrotate(xform, angle.x, set(1,0,0) );\nrotate(xform, angle.y, set(0,1,0) );\nrotate(xform, angle.z, set(0,0,1) );\n\nscale(xform, scale);\n\ntranslate(xform, translate);\n\n@P *= xform;\n```\n\n---\n\n### sources / further reading\n- [Linear Transformations - 3Blue1Brown](https://www.3blue1brown.com/lessons/linear-transformations)\n- [Houdini Tutorial | Extracting transformation matrix with VEX - Paweł Rutkowski](https://vimeo.com/284712920)\n- [Pure VEX Workshop Week 6: Warping with Matrices - John Kunz](https://www.youtube.com/watch?v=DA0ZuIJ-W7s)\n- [Houdini Translate Rotate Scale Bend with Matrices \u0026 Quaternions in VEX - Nodes of Nature](https://www.youtube.com/watch?v=e9qLWS2La28)\n- [Matrix Transformation- Mohamad Salame](https://www.artstation.com/blogs/mohamad_salame1/v6eP/matrix-transformation)\n\n","lastmodified":"2022-07-02T22:25:11.454859907Z","tags":null},"/notes/Numbers":{"title":"Numbers","content":"\n### Golden Ratio\n\nRatio between two numbers that equals approximately: 1.618\n\n$\\frac{a+b}{a}=\\frac{a}{b}$\n\n### Golden Angle\n\n$\\phi= 137.5 \\degree$ - very useful when creating organic flowery stuff. Have a look at [this](https://entagma.com/td-essentials-create-a-swept-phyllotaxis-operator-in-houdini/) awesome video from Entagma for more information.\n\n$\\frac{360\\degree -137,5\\degree}{137,5\\degree}\\approx 1.618$\n\n### Fibonacci Sequence\n\n$F_1=F_2=1$       $F_n=F_{n-1} + F_{n-2}$\n\n0  1  1  2  3  5  8  13  21  34  55  89  144  233  377  610  987 ...\n\n--- \n\nAlso [John Kunz](https://wiki.johnkunz.com/index.php?title=Mathematical_Functions_in_VEX) pointed out these constants that are defined in `$HFS/houdini/vex/include/math.h`  and can be used in any VEX wrangle:\n\n```C++\nM_E         2.7182818    // sometimes called the natural number, or Euler's number\nLN10        2.3025850    // natural logarithm of 10\nLN2         0.6931471    // natural logarithm of 2\nLOG10E      0.4342944\nLOG2E       1.4426950\nPI          3.1415926    // 180° in radians, the ratio of the circumference to diameter of a circle\nM_TWO_PI    6.2831852    // 360° in radians, the circumference of a unit circle, 2 * PI\nPI_2        1.5707963    // 90° in radians, 1/4th of the circumference of a unit circle, PI / 2\nPI_4        0.7853981    // 45° in radians, 1/8th of the circumference of a unit circle, PI / 4\nSQRT1_2     0.7071067\nSQRT2       1.4142135\nTOLERANCE   0.0001\n\n// SOURCE: John Kunz's Wiki\n```","lastmodified":"2022-07-02T22:25:11.454859907Z","tags":null},"/notes/Op-Operators":{"title":"Op Operators","content":"\n\"[Op Operators I will Never Memorize](https://www.artstation.com/blogs/mohamad_salame1/DlQG/op-operators-i-will-never-memorize)\" is a fantastic blog post by Mohamad Salame that summarizes all the obscurities and pitfalls when having to deal with `op` syntax.","lastmodified":"2022-07-02T22:25:11.454859907Z","tags":null},"/notes/Other":{"title":"Other","content":"\n### Nuke\n\n### Color Grading\n\n\n\n","lastmodified":"2022-07-02T22:25:11.454859907Z","tags":null},"/notes/Projects-and-RnD":{"title":"Projects / R\u0026D","content":"\n# Projects\n\n# R\u0026D\n\n### Deep Learning\n- [[notes/Digit Recognition in Houdini |Digit Recognition in Houdini]]","lastmodified":"2022-07-02T22:25:11.454859907Z","tags":null},"/notes/Quaternion-Euler-Rotations":{"title":"Quaternion \u0026 Euler Rotations","content":"\n### Quaternions\n\nexpressed as 4 numbers `vector4 = [x, y, z, w]`\n\nIt's usually used to define rotational transformation in 3D Space. To do so it needs 2 types of information: \n- rotational angle   $\\theta$\n- rotational axis   $A$\n\nThe 4 vector values of a quaternion are calculated in the following way:\n\n$q = (sin(\\frac{\\theta}{2})*Ax, sin(\\frac{\\theta}{2})*Ay, sin(\\frac{\\theta}{2})*Az, cos(\\frac{\\theta}{2}))$\n\nIn VEX we can use the quaternion function which accepts an angle in radians and an axis vector to propagate the vector4 accordingly.\n\n### Rotating Vectors\n\n```C#\n//this goes in a point wrangle\n\nfloat angle = chf(\"angle\");\nvector axis = normalize(chv(\"axis\"));\n\nvector4 rot = quaternion(radians(angle), axis);\n@P = qrotate(rot, @P);\n```\n\n### Euler Rotation\n\nWhile Quaternians define the rotational transformation with an angle around a specified axis, Euler rotation is defined by 3 Parameters (compare `Transform Node` x, y, z).\n\nTo convert Euler rotations to quaternions we need to specify the rotation order:\n\n```C#\nvector angles = chv(\"angles\");\nangles = radians(angles);\n\nint order = XFORM_XYZ; // integer arguments are defined in $HH/vex/include/math.h\n\nvector4 rot = eulertoquaternion(angles, order);\n\np@quat = rot;\n```\n\nRotation Order Integer Arguments as defined in `$HH/vex/include/math.h`:\n\n```C++\n#define XFORM_XYZ 0 // Rotate order X, Y, Z\n#define XFORM_XZY 1 // Rotate order X, Z, Y\n#define XFORM_YXZ 2 // Rotate order Y, X, Z\n#define XFORM_YZX 3 // Rotate order Y, Z, X\n#define XFORM_ZXY 4 // Rotate order Z, X, Y\n#define XFORM_ZYX 5 // Rotate order Z, Y, X\n```\n\nSame thing works backwards:\n\n```C#\nvector4 quat = p@quat;\n\nvector euler = quaterniontoeuler(quat, XFORM_XYZ);\n\nv@euler = degrees(euler);\n```\n\n\n### Blending Quaternions with `slerp()`\n\nMatrices can do most of what quaternions can do and more (translation \u0026 scale). However, one thing that quaternions enable you to do is using the `slerp` function to blend smoothly between two rotational transformations.\n\n![[notes/images/QuaternionSlerpCut.gif]]\n\nIn this example the two orientations get initialized buy rotating a line in two different ways and extracting each quaternion.\n\n```C#\n// this goes in point wrangle \"quat_1 \u0026 2\"\n\nfloat angle = chf(\"angle\");\nvector axis = normalize(chv(\"axis\"));\n\nvector4 rot = quaternion(radians(angle), axis);\n@P = qrotate(rot, @P);\n\np@quat = rot;\n```\n\nThen we can blend rotationally between the two orientations with the `slerp` function and apply the blended result.\n\n```C#\n// this goes in point wrangle  \"slerp\"\n\nvector4 quat1 = point(1, \"quat\", 1);\nvector4 quat2 = point(2, \"quat\", 1);\n\nvector4 rot = slerp(quat1, quat2, chf(\"blend\"));\n\n@P = qrotate(rot, @P);\n@N = qrotate(rot, @N);\n```\n\n##### Download: [File](https://github.com/jakobringler/blog/tree/hugo/content/notes/sharedfiles/QuaternionSlerp.hiplc)\n\n### Using `dihedral` Function to Orient Vectors\n\nThe dihedral function creates a quaternion that describes the rotational transformation between two given vectors. This can be used to switch between two orientations of a mesh.\n\n![[notes/images/Pasted image 20220604005136.png]]\n```C#\nvector v1 = normalize(point(1, \"P\", 1));\nvector v2 = normalize(point(2, \"P\", 1));\n\nvector4 quat = dihedral(v1, v2);\n\n@P = qrotate(quat, @P);\n```\n\n### sources /  further reading\n- [[VEX for Algorithmic Design] E14 _ Quaternion Basics - \nJunichiro Horikawa](https://www.youtube.com/watch?v=MYRtwY-DQV8)\n- [Visualizing quaternions - Grant Sanderson (3blue1brown)](https://eater.net/quaternions)\n\n### Related\n- [[notes/Matrix Operations |Matrix Operations]]","lastmodified":"2022-07-02T22:25:11.454859907Z","tags":null},"/notes/Recurrent-Neural-Networks-RNNs":{"title":"Recurrent Neural Networks (RNNs)","content":"\n### Architecture\n\nRelated: [[notes/Feed Forward Networks (FFNs) |Feed Forward Networks (FFNs)]], [[notes/Convolutional Neural Networks (CNNs) |Convolutional Neural Networks (CNNs)]], [[notes/Generative Adversarial Networks (GANs) |Generative Adversarial Networks (GANs)]] \n\n\n\n","lastmodified":"2022-07-02T22:25:11.454859907Z","tags":null},"/notes/Resources":{"title":"Resources","content":"# Downloads \u0026 Scripts\n[[notes/VEX Snippets |VEX Snippets]]\n\n# Links\n\n## CG \u0026 VFX\n### Houdini\n- [cgwiki - Matt Estela](https://www.tokeru.com/cgwiki/index.php?title=Houdini) all things houdini\n- [Entagma - Moritz Schwind \u0026 Manuel Casasola Merkle](https://entagma.com/) procedural \u0026 motion design\n- [VEX for Algorithmic Design - Junichiro Horikawa](https://www.youtube.com/playlist?list=PLzRzqTjuGIDhiXsP0hN3qBxAZ6lkVfGDI) VEX, procedural design\n- [procegen - Konstantin Magnus](https://procegen.konstantinmagnus.de/) procedural workflows, automation\n- [wiki - John Kunz](https://wiki.johnkunz.com/index.php?title=Main_Page) VEX, resources\n- [Toadstorm Nerdblog - Henry Foster](https://www.toadstorm.com/blog/) MOPs, procedural workflows \u0026 python\n- [Blog - Nick Taylor (Aeoll)](https://www.nicholas-taylor.com/blog) FX, technical, motion design\n- [Blog - Jake Rice](https://jakerice.design/blog/) VEX, math, technical\n- [Blog - Sergen Eren](https://sergeneren.com/) FX, technical, clouds, photon simulation\n- [Houdini Gubbins](https://houdinigubbins.wordpress.com/) technical, VEX, math, geometry, algorithms\n- [FX Thinking - Alessandro Pepe](https://pepefx.blogspot.com/) FX, technical\n- [1 Minute VEX - Aaron Smith](https://aaronsmith.tv/1-Minute-VEX) VEX\n- [Houdini Tutorials Tailored for Mathematicians](http://wordpress.discretization.de/houdini/) math, technical\n- [Blog - Rok Andic](https://www.rokandic.com/blog) rigging, animation\n- [Daily Hip - Eetu](https://dailyhip.wordpress.com/) technical, hip files\n- [Crowds Plus - Thomas K Christensen](https://crowdsplus.notion.site/)\n- [The Brain Extension - Iiro Kivistö](https://www.thebrainextension.com/) grooming, CFX\n- [Creature Garage - JesusFC](https://creaturegarage.com/) grooming\n\n### Other\n\n## Math\n- [Essence of Linear Algebra - 3Blue1Brown](https://www.3blue1brown.com/topics/linear-algebra) theory\n- [The Beauty of Bézier Curves - Freya Holmér](https://www.youtube.com/watch?v=aVwxzDHniEw) theory\n\n## Deep Learning\n### Houdini\n- [Houdini Machine Learning - Edmond Boulet-Gilly](https://www.youtube.com/watch?v=WNEEokEq-Fg\u0026list=PLSie_1zkANDbn7wCD9kifPAp5wJmok02V) ML, PyTorch, technical\n\n### Theory\n- [Aladdin Persson](https://www.youtube.com/c/AladdinPersson) theory, paper review, pytorch \u0026 tensorflow tutorials","lastmodified":"2022-07-02T22:25:11.454859907Z","tags":null},"/notes/Setting-up-Anaconda-and-Houdini-for-3D-Deep-Learning-on-Linux":{"title":"Setting up Anaconda and Houdini for 3D Deep Learning on Linux","content":"\n### Installation\n\nTo get started install [Anaconda](https://anaconda.org/) and run the following commands in your terminal:\n\n( **hou** is the name of the new enviroment and python **3.7.4** is required because this is the version used in Houdini )\n\n```bash\nconda create -n hou python=3.7.4\n```\n\n```bash\nconda activate hou\n```\n\nThen install libraries like for example [PyTorch 3D](https://github.com/facebookresearch/pytorch3d). ( For simplicities sake we will go forward with vanilla [PyTorch](https://pytorch.org/). )\n\n```bash\nconda install pytorch torchvision torchaudio cudatoolkit=11.3 -c pytorch\n```\n\nAs [jpparkeramnh](https://www.sidefx.com/profile/jpparkeramnh/) pointed out in [this](https://www.sidefx.com/forum/topic/58397/) SideFX forum post you have to export the **LD_PRELOAD** variable.\n\n```bash\nexport LD_PRELOAD=$CONDA_PREFIX/lib/libpython3.7m.so\n```\n\n### .bashrc Modifications\n\nI also recommend sourcing Houdini in the terminal.\n\nTo do so first open the .bashrc in the terminal\n\n```bash\nnano .bashrc\n```\n\nand add the following lines to your .bashrc\n\n```bash\ncd /opt/hfs19.0/\nsource ./houdini_setup\ncd ~\nconda activate hou\nexport LD_PRELOAD=$CONDA_PREFIX/lib/libpython3.7m.so\nalias expenv='LD_PRELOAD=$CONDA_PREFIX/lib/libpython3.7m.so'\n```\n\n-   The first 3 lines run the houdini setup bash script\n-   Line 4 activates a default environment ( for me “hou” )\n-   Line 5 exports the LD_PRELOAD varible of the currently activated environment ( hou )\n-   Line 6 creates an alias to export the currently activated environment from the terminal\n\nNow you should be able to just activate your respecitve conda environment, export the correct LD_PRELOAD variable by typing “**expenv**” and then run houdini from there by typing “**houdini**“.\n\nTo check if everything is running as expected open the Houdini Python shell and type:\n\n```python\nimport torch \n```\n\nIf it doesn’t give you any errors you should be good to go.\n\n\n","lastmodified":"2022-07-02T22:25:11.454859907Z","tags":null},"/notes/Tensors":{"title":"Tensors","content":"\n### What are \"Tensors\"?\n\n\n![[notes/images/tensordims.png]]\n\n### Image Tensors\n![[notes/images/imagetensor.png]]\n","lastmodified":"2022-07-02T22:25:11.454859907Z","tags":null},"/notes/Tower-Sketcher":{"title":"Tower Sketcher","content":"\n### Training a Neural Net to Understand my Drawings\n\n","lastmodified":"2022-07-02T22:25:11.454859907Z","tags":null},"/notes/VEX-Snippets":{"title":"VEX Snippets","content":"\n# Wrangle Cheat Sheet\n\u003eI try my best to credit and link to any sources. That being said, some of those are pretty old and I have no idea where they came from.\n\u003e\n\u003eI recommend installing this handy python panel to manage your own snippet collection: [Vex Snippet Library](https://github.com/dchow1992/Vex_Snippet_Library)\n\n### Attribute Min Max\n```C\n// point wrangle\n\nfloat value;\nfloat values[];\nstring attrname = \"name\";\nfloat max_value;\nfloat min_value;\n\nfor (int i=0; i\u003c@numpt; i++)\n{\n\tvalue = point(geoself(), attrname, i);\n\tappend(values,value);\n}\n\nmin_value = min(values);\nmax_value = max(values);\n\nf[]@range;\n\n@range[0] = min_value;\n@range[1] = max_value;\n```\n\n### Attribute to String\n```C\ns@name = \"piece_\" + itoa(i@class);\n```\n\n### Attribute Transfer\n```C\n// point wrangle\n\nint posprim;\nvector param_uv;\nfloat maxdist = 10;\nfloat dist = xyzdist(1,@P,posprim,param_uv,maxdist);\nvector pos = primuv(1,\"rest\",posprim,param_uv);\nv@rest = pos;\n```\n\n### Average Point Cloud Positions\n```C\n// point wrangle\n\nvector value;\nvector values[];\n\nfor (int i=0; i\u003c@numpt; i++)\n{\n\tvalue = point(geoself(), \"P\", i);\n\tappend(values,value);\n}\n  \nvector avgP = avg(values);\n\nif(@ptnum\u003e0)\n{\n\tremovepoint(geoself(), @ptnum);\n} \n\n@P = avgP;\n```\n\n### Bias and Gain\n```C\nfunction float bias(float val; float bias) \n{\n    return (val / ((((1.0/bias) - 2.0)*(1.0 - val))+1.0));\n}\n\nfunction float gain(float val; float gain) \n{\n    if(val \u003c 0.5)\n    {\n        return bias(val * 2.0,gain)/2.0;\n    }\n    else\n    {\n        return bias(val * 2.0 - 1.0,1.0 - gain)/2.0 + 0.5;\n    }\n}\n\nfloat val = pow(val, exp); \n```\n\nSources:\n- [Michael Frederickson's Tweet](https://twitter.com/mfrederickson/status/1523148417349816320)\n- [Alan Wolfe's Blog Post](https://blog.demofox.org/2012/09/24/bias-and-gain-are-your-friend/)\n\n### Bounding Box\n```C\nvector bbox = getbbox_size(0);\nvector bbox_max = getbbox_max(0);\nvector bbox_min = getbbox_min(0);\nvector bbox_center = getbbox_center(0);\n  \nfloat xsize = getbbox_size(0).x;\nfloat y_max = getbbox_max(0).y;\nfloat z_min = getbbox_min(0).z;\n```\n\n### Calculate Point Density\n```C\n// point wrangle\n\nfloat maxdist = chf(\"maxdist\");\nint maxpts = chi(\"maxpts\");\nint points = len(nearpoints, 0, @P, maxdist, maxpts);\n\nf@density = float(points) / maxpts;\n```\n\n### Camera Position and Direction\n```C\n// point wrangle (best used on a single point)\n\nstring cam = chs(\"cam\");\nmatrix camXform = optransform(cam); \nvector cpos;\nvector cdir;\nvector cup;\n\ncpos = cracktransform(0, 0, 0, {0,0,0}, camXform);\ncdir = vtransform(cam,\"space:world\", {0,0,-1});\ncup = vtransform(cam,\"space:world\", {0,1,0});\n\nv@P = cpos;\nv@N = cdir;\nv@up = cup;\n```\n\n### Create Name Attribute for each Prim Group\n```C\nstring grps[] = detailintrinsic(0, 'primitivegroups');\nforeach(string g; grps)\n{\n\taddprimattrib(0, g, 123);\n}\n```\n\n### Collision Check and Deintersection with SDF VDB\n```C\n// point wrangle\n\nvector gradient = volumegradient(1, \"surface\", v@P); \nfloat surface = volumesample(1, \"surface\", v@P);\n\nif(surface \u003c chf(\"dist\"))\n{\n\tv@P += normalize(gradient) * abs(surface);\n}\n```\n\n### Edgefalloff\n```C\n// point wrangle\n\nif (@edgefalloff==1)\n{\n\tint near[] = nearpoints(0,@P,chf(\"dist\"));\n\t\n\tforeach (int pnt;near)\n\t{\n\t\tvector pntP = point(0,\"P\",pnt);\n\t\tfloat dist = fit(distance(pntP,@P),0,chf(\"dist\")*2,1,-1);\n\t\tsetpointattrib(0,\"edgefalloff\",pnt,dist,\"set\");\n\t}\n}\n```\n\n### Expand Group Over Geo\n```C\n// point wrangle\n\nint pc = pcopen(0, 'P', @P, chf('radius'), chi('maxpts'));\n\nwhile (pciterate(pc) \u003e 0)\n{\n\tint currentpt;\t\n\tpcimport(pc, 'point.number', currentpt);\n\tsetpointgroup(0, 'group1', currentpt, 1);\n}\n```\n\n### Extract Tranformation Matrix\n```C\n// point wrangle\n\nvector P1 = point(0, \"P\", 0);\nvector P2 = point(0, \"P\", 1);\nvector up = {0,1,0};\n\nvector X = normalize(P2-P1);\nvector Z = normalize(cross(up, X));\nvector Y = normalize(cross(X, Z));\n\nvector P = P1 + (P2 - P1) / 2;\n\nmatrix transform = set(X, Y, Z, P);\n\nsetcomp(transform, 0, 0, 3); \nsetcomp(transform, 0, 1, 3);\nsetcomp(transform, 0, 2, 3); \n\n4@transform = transform;\n```\n\nHave a look at [[notes/Matrix Operations |this note]] for more information on how it's used.\n\n### Group by N Connections\n```C\n// point wrangle\n\nint n = chi(\"Neighbours\");\n\nif (neighbourcount (0, @ptnum) \u003e n)\n{\n\tsetpointgroup (0, \"grouped\", @ptnum, 1);\n}\n```\n\n### Isolate Overlapping Points\n```C\n// point wrangle\n\nint near[] = pcfind(0, \"P\", @P, 0.0001, 2);\n\nif(len(near) \u003e 1)\n{\n\tsetpointgroup(0, \"double\", @ptnum, 1);\n}\n```\n\n### Orientation Template for Copy\n```C\n// point wrangle\n\n@up = {0,1,0};\n@orient = quaternion(maketransform(@N,@up));\nvector4 rot_Y = quaternion(radians(ch('Y')),{0,1,0});\n@orient = qmultiply(@orient, rot_Y);\n```\n\n### Remove Point by Condition\n[Mai Ao](https://twitter.com/aomai01) compared two point deletion methods, where method 1 gives a 15x speed increase over the traditional `removepoint()` function\n\n1. group points first and blast group in another step\n\n```C\n// point wrangle\n\nfloat half_cone_rad = radians(chf(\"half_cone\"));\n@group_to_delete = acos(dot(@P, {0,0,1})) \u003c= half_cone_rad;\n```\n\n2. removepoint()\n\n```C\n// point wrangle\n\nfloat half_cone_rad = radians(chf(\"half_cone\"));\n\nif(acos(dot(@P, {0,0,1})) \u003c= half_cone_rad)\n{\n\tremovepoint(0, @ptnum);\n}\n```\n\nSources:\n- [Mai Ao's Tweet](https://twitter.com/aomai01/status/1514226273794641925/photo/1)\n\n### Remove Point Percentage\n```C\n// point wrangle\n\nint percentage = ch('percentage'); \n\nif(@ptnum % 100 \u003c percentage)\n{\n\tremovepoint(0, @ptnum );\n}\n```\n\n### Rotate Vector\n```C\n// point wrangle\n\nfloat angle = chf(\"angle\");\nvector axis = normalize(chv(\"axis\"));\n\nvector4 rot = quaternion(radians(angle), axis);\n@P = qrotate(rot, @P);\n```\n\n### Sharpen Point Cloud\n```C\n// point wrangle\n\nint handle = pcopen(0, \"P\", @P, chf(\"radius\"), chi(\"maxpoints\"));\nv@P = pcfilter(handle, \"P\");\n```\n\n### Translate, Rotate, Scale \u0026 Bend\n```C\n// point wrangle\n\nvector t = chv('translate');\nvector r = radians(chv('rotate_before'));\nvector rot = radians(chv('rotate_after'));\nvector s = chv('scale');\nmatrix xform = detail(0,'xform');\n\nif(determinant(xform) == 0) xform = ident(); //initialize xform if not found\n\n//Scaling\nmatrix3 S = set(set(s.x, 0, 0), set(0, s.y, 0), set(0, 0, s.z));\n\n//General Rotation Before\nmatrix3 R = set( cos(r.b)*cos(r.g), cos(r.b)*sin(r.g)*sin(r.r)-sin(r.b)*cos(r.r), cos(r.b)*sin(r.g)*cos(r.r)+sin(r.b)*sin(r.r),\n                 sin(r.b)*cos(r.g), sin(r.b)*sin(r.g)*sin(r.r)+cos(r.b)*cos(r.r), sin(r.b)*sin(r.g)*cos(r.r)-cos(r.b)*sin(r.r),\n                 -sin(r.g), cos(r.g)*sin(r.r), cos(r.g)*cos(r.r) );\n\n//Translation\nmatrix T = set(set(1, 0, 0, 0), set(0, 1, 0, 0), set(0, 0, 1, 0), set(t.x, t.y, t.z, 1));\n\n//Basic Rotation After\n\nmatrix3 Rx = set(1,0,0, 0,cos(rot.x),-sin(rot.x), 0,sin(rot.x),cos(rot.x));\nmatrix3 Ry = set(cos(rot.y),0,sin(rot.y), 0,1,0, -sin(rot.y),0,cos(rot.y));\nmatrix3 Rz = set(cos(rot.z),-sin(rot.z),0, sin(rot.z),cos(rot.z),0 ,0,0,1);\nmatrix3 Rxyz = Rx*Ry*Rz;\n\n//Bend\n\nvector bendaxis = chv('Bend_Axis');\nvector min = getbbox_min(0);\nvector max = getbbox_max(0);\nfloat grad;\n\nif(chi('bend_coord') == 0)\n{\n    grad = fit(@P.x, min.x, max.x, 0, 1);\n}\n\nelse if(chi('bend_coord') == 1)\n{\n    grad = fit(@P.y, min.y, max.y, 0, 1);\n}\n\nelse\n{\n    grad = fit(@P.z, min.z, max.z, 0, 1);\n}\n\nfloat angle = chf('bend') *pow(chramp('BendRamp',grad), 1+chf('bend_power'));\nvector4 quat = quaternion(radians(angle), bendaxis);\n@P = qrotate(quat, @P);\n\n//Rotate around axis at Centroid\n\nmatrix mtx1 = ident(); \nvector axis = normalize(chv('axis'));\nfloat ang = radians(chf('angle'));\nrotate(mtx1, ang, axis);\n\n//Matrix Multiplication\n\nmatrix mtx2 = invert(xform)*S*mtx1*xform*R*T*Rxyz; //order matters\n@P *= mtx2;\n\n//store in xform detail\n\nsetdetailattrib(0, 'xform', xform*mtx2, 'set');\n```\n\nSources:\n- [Houdini Translate Rotate Scale Bend with Matrices \u0026 Quaternions in VEX - Nodes Of Nature](https://www.youtube.com/watch?v=e9qLWS2La28)\n- [Mohamad Salame's ArtStation](https://www.artstation.com/blogs/mohamad_salame1/OQNX/translate-rotate-scale-bend-with-matrices-quaternions-in-vex)","lastmodified":"2022-07-02T22:25:11.454859907Z","tags":null},"/notes/Vector-Shenanigans":{"title":"Vector Shenanigans","content":"\ncoming soon","lastmodified":"2022-07-02T22:25:11.454859907Z","tags":null},"/notes/config":{"title":"Configuration","content":"\n## Configuration\nQuartz is designed to be extremely configurable. You can find the bulk of the configuration scattered throughout the repository depending on how in-depth you'd like to get.\n\nThe majority of configuration can be found under `data/config.yaml`. An annotated example configuration is shown below.\n\n```yaml {title=\"data/config.yaml\"}\n# The name to display in the footer\nname: Jacky Zhao\n\n# whether to globally show the table of contents on each page\n# this can be turned off on a per-page basis by adding this to the\n# front-matter of that note\nenableToc: true\n\n# whether to by-default open or close the table of contents on each page\nopenToc: false\n\n# whether to display on-hover link preview cards\nenableLinkPreview: true\n\n# whether to render titles for code blocks\nenableCodeBlockTitle: true \n\n# whether to try to process Latex\nenableLatex: true\n\n# whether to enable single-page-app style rendering\n# this prevents flahses of unstyled content and overall improves\n# smoothness of quartz. More info in issue #109 on GitHub\nenableSPA: true\n\n# whether to render a footer\nenableFooter: true\n\n# whether backlinks of pages should show the context in which\n# they were mentioned\nenableContextualBacklinks: true\n\n# whether to show a section of recent notes on the home page\nenableRecentNotes: false\n\n# page description used for SEO\ndescription:\n  Host your second brain and digital garden for free. Quartz features extremely fast full-text search,\n  Wikilink support, backlinks, local graph, tags, and link previews.\n\n# title of the home page (also for SEO)\npage_title:\n  \"🪴 Quartz 3.2\"\n\n# links to show in the footer\nlinks:\n  - link_name: Twitter\n    link: https://twitter.com/_jzhao\n  - link_name: Github\n    link: https://github.com/jackyzha0\n```\n\n### Code Block Titles\n\nTo add code block titles with Quartz:\n\n1. Ensure that code block titles are enabled in Quartz's configuration:\n\n    ```yaml {title=\"data/config.yaml\", linenos=false}\n    enableCodeBlockTitle: true\n    ```\n\n2. Add the `title` attribute to the desired [code block\n   fence](https://gohugo.io/content-management/syntax-highlighting/#highlighting-in-code-fences):\n\n      ```markdown {linenos=false}\n       ```yaml {title=\"data/config.yaml\"}\n       enableCodeBlockTitle: true  # example from step 1\n       ```\n      ```\n\n**Note** that if `{title=\u003cmy-title\u003e}` is included, and code block titles are not\nenabled, no errors will occur and the title attribute will be ignored.\n\n### HTML Favicons\nIf you would like to customize the favicons of your quartz-based website, you \ncan add them to the `data/config.yaml` file. The **default** without any set \n`favicon` key is:\n\n```html {title=\"layouts/partials/head.html\", linenostart=15}\n\u003clink rel=\"shortcut icon\" href=\"icon.png\" type=\"image/png\"\u003e\n```\n\nThe default can be overridden by defining a value to the `favicon` key in your \n`data/config.yaml` file. Here is a `List[Dictionary]` example format, which is\nequivalent to the default:\n\n```yaml {title=\"data/config.yaml\", linenos=false}\nfavicon:\n  - { rel: \"shortcut icon\", href: \"icon.png\", type: \"image/png\" }\n#  - { ... } # Repeat for each additional favicon you want to add\n```\n\nIn this format, the keys are identical to their HTML representations.\n\nIf you plan to add multiple favicons generated by a website (see list below), it\nmay be easier to define it as HTML. Here is an example which appends the \n**Apple touch icon** to quartz's default favicon:\n\n```yaml {title=\"data/config.yaml\", linenos=false}\nfavicon: |\n  \u003clink rel=\"shortcut icon\" href=\"icon.png\" type=\"image/png\"\u003e\n  \u003clink rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"/apple-touch-icon.png\"\u003e\n```\n\nThis second favicon will now be used as a web page icon when someone adds your \nwebpage to the home screen of their Apple device. If you are interested in more \ninformation about the current, and past, standards of favicons, you can read \n[this article](https://www.emergeinteractive.com/insights/detail/the-essentials-of-favicons/).\n\n**Note** that all generated favicon paths, defined by the `href` \nattribute, are relative to the `static/` directory.\n\n### Graph View\nTo customize the Interactive Graph view, you can poke around `data/graphConfig.yaml`.\n\n\n```yaml {title=\"data/graphConfig.yaml\"}\n# if true, a Global Graph will be shown on home page with full width, no backlink.\n# A different set of Local Graphs will be shown on sub pages.\n# if false, Local Graph will be default on every page as usual\nenableGlobalGraph: false\n\n### Local Graph ###\nlocalGraph:\n\t# whether automatically generate a legend\n    enableLegend: false\n    \n    # whether to allow dragging nodes in the graph\n    enableDrag: true\n    \n    # whether to allow zooming and panning the graph\n    enableZoom: true\n    \n    # how many neighbours of the current node to show (-1 is all nodes)\n    depth: 1\n    \n    # initial zoom factor of the graph\n    scale: 1.2\n    \n    # how strongly nodes should repel each other\n    repelForce: 2\n\n    # how strongly should nodes be attracted to the center of gravity\n    centerForce: 1\n\n    # what the default link length should be\n    linkDistance: 1\n    \n    # how big the node labels should be\n    fontSize: 0.6\n    \n    # scale at which to start fading the labes on nodes\n    opacityScale: 3\n\n### Global Graph ###\nglobalGraph:\n\t# same settings as above\n\n### For all graphs ###\n# colour specific nodes path off of their path\npaths:\n  - /moc: \"#4388cc\"\n```\n\n\n## Styling\nWant to go even more in-depth? You can add custom CSS styling and change existing colours through editing `assets/styles/custom.scss`. If you'd like to target specific parts of the site, you can add ids and classes to the HTML partials in `/layouts/partials`. \n\n### Partials\nPartials are what dictate what actually gets rendered to the page. Want to change how pages are styled and structured? You can edit the appropriate layout in `/layouts`.\n\nFor example, the structure of the home page can be edited through `/layouts/index.html`. To customize the footer, you can edit `/layouts/partials/footer.html`\n\nMore info about partials on [Hugo's website.](https://gohugo.io/templates/partials/)\n\nStill having problems? Checkout our [FAQ and Troubleshooting guide](notes/troubleshooting.md).\n\n## Language Support\n[CJK + Latex Support (测试)](notes/CJK%20+%20Latex%20Support%20(测试).md) comes out of the box with Quartz.\n\nWant to support languages that read from right-to-left (like Arabic)? Hugo (and by proxy, Quartz) supports this natively.\n\nFollow the steps [Hugo provides here](https://gohugo.io/content-management/multilingual/#configure-languages) and modify your `config.toml`\n\nFor example:\n\n```toml\ndefaultContentLanguage = 'ar'\n[languages]\n  [languages.ar]\n    languagedirection = 'rtl'\n    title = 'مدونتي'\n    weight = 1\n```\n","lastmodified":"2022-07-02T22:25:11.454859907Z","tags":null},"/notes/editing":{"title":"Editing Content in Quartz","content":"\n## Editing \nQuartz runs on top of [Hugo](https://gohugo.io/) so all notes are written in [Markdown](https://www.markdownguide.org/getting-started/).\n\n### Folder Structure\nHere's a rough overview of what's what.\n\n**All content in your garden can found in the `/content` folder.** To make edits, you can open any of the files and make changes directly and save it. You can organize content into any folder you'd like.\n\n**To edit the main home page, open `/content/_index.md`.**\n\nTo create a link between notes in your garden, just create a normal link using Markdown pointing to the document in question. Please note that **all links should be relative to the root `/content` path**. \n\n```markdown\nFor example, I want to link this current document to `notes/config.md`.\n[A link to the config page](notes/config.md)\n```\n\nSimilarly, you can put local images anywhere in the `/content` folder.\n\n```markdown\nExample image (source is in content/notes/images/example.png)\n![Example Image](/content/notes/images/example.png)\n```\n\nYou can also use wikilinks if that is what you are more comfortable with!\n\n### Front Matter\nHugo is picky when it comes to metadata for files. Make sure that your title is double-quoted and that you have a title defined at the top of your file like so. You can also add tags here as well.\n\n```yaml\n---\ntitle: \"Example Title\"\ntags:\n- example-tag\n---\n\nRest of your content here...\n```\n\n### Obsidian\nI recommend using [Obsidian](http://obsidian.md/) as a way to edit and grow your digital garden. It comes with a really nice editor and graphical interface to preview all of your local files.\n\nThis step is **highly recommended**.\n\n\u003e 🔗 Step 3: [How to setup your Obsidian Vault to work with Quartz](notes/obsidian.md)\n\n## Previewing Changes\nThis step is purely optional and mostly for those who want to see the published version of their digital garden locally before opening it up to the internet. This is *highly recommended* but not required.\n\n\u003e 👀 Step 4: [Preview Quartz Changes](notes/preview%20changes.md)\n\nFor those who like to live life more on the edge, viewing the garden through Obsidian gets you pretty close to the real thing.\n\n## Publishing Changes\nNow that you know the basics of managing your digital garden using Quartz, you can publish it to the internet!\n\n\u003e 🌍 Step 5: [Hosting Quartz online!](notes/hosting.md)\n\nHaving problems? Checkout our [FAQ and Troubleshooting guide](notes/troubleshooting.md).\n","lastmodified":"2022-07-02T22:25:11.454859907Z","tags":null},"/notes/hosting":{"title":"Deploying Quartz to the Web","content":"\n## Hosting on GitHub Pages\nQuartz is designed to be effortless to deploy. If you forked and cloned Quartz directly from the repository, everything should already be good to go! Follow the steps below.\n\n### Enable GitHub Actions\nBy default, GitHub disables workflows from running automatically on Forked Repostories. Head to the 'Actions' tab of your forked repository and Enable Workflows to setup deploying your Quartz site!\n\n![Enable GitHub Actions](notes/images/github-actions.png)*Enable GitHub Actions*\n\n### Enable GitHub Pages\n\nHead to the 'Settings' tab of your forked repository and go to the 'Pages' tab.\n\n1. (IMPORTANT) Set the source to deploy from `master` (and not `hugo`) using `/ (root)`\n2. Set a custom domain here if you have one!\n\n![Enable GitHub Pages](/notes/images/github-pages.png)*Enable GitHub Pages*\n\n### Pushing Changes\nTo see your changes on the internet, we need to push it them to GitHub. Quartz is a `git` repository so updating it is the same workflow as you would follow as if it were just a regular software project.\n\n```shell\n# Navigate to Quartz folder\ncd \u003cpath-to-quartz\u003e\n\n# Commit all changes\ngit add .\ngit commit -m \"message describing changes\"\n\n# Push to GitHub to update site\ngit push origin hugo\n```\n\nNote: we specifically push to the `hugo` branch here. Our GitHub action automatically runs everytime a push to is detected to that branch and then updates the `master` branch for redeployment.\n\n### Setting up the Site\nNow let's get this site up and running. Never hosted a site before? No problem. Have a fancy custom domain you already own or want to subdomain your Quartz? That's easy too.\n\nHere, we take advantage of GitHub's free page hosting to deploy our site. Change `baseURL` in `/config.toml`. \n\nMake sure that your `baseURL` has a trailing `/`!\n\n[Reference `config.toml` here](https://github.com/jackyzha0/quartz/blob/hugo/config.toml)\n\n```toml\nbaseURL = \"https://\u003cYOUR-DOMAIN\u003e/\"\n```\n\nIf you are using this under a subdomain (e.g. `\u003cYOUR-GITHUB-USERNAME\u003e.github.io/quartz`), include the trailing `/`. **You need to do this especially if you are using GitHub!**\n\n```toml\nbaseURL = \"https://\u003cYOUR-GITHUB-USERNAME\u003e.github.io/quartz/\"\n```\n\nChange `cname` in `/.github/workflows/deploy.yaml`. Again, if you don't have a custom domain to use, you can use `\u003cYOUR-USERNAME\u003e.github.io`.\n\nPlease note that the `cname` field should *not* have any path `e.g. end with /quartz` or have a trailing `/`.\n\n[Reference `deploy.yaml` here](https://github.com/jackyzha0/quartz/blob/hugo/.github/workflows/deploy.yaml)\n\n```yaml {title=\".github/workflows/deploy.yaml\"}\n- name: Deploy  \n  uses: peaceiris/actions-gh-pages@v3  \n  with:  \n\tgithub_token: ${{ secrets.GITHUB_TOKEN }} # this can stay as is, GitHub fills this in for us!\n\tpublish_dir: ./public  \n\tpublish_branch: master\n\tcname: \u003cYOUR-DOMAIN\u003e\n```\n\nHave a custom domain? [Learn how to set it up with Quartz ](notes/custom%20Domain.md).\n\n### Ignoring Files\nOnly want to publish a subset of all of your notes? Don't worry, Quartz makes this a simple two-step process.\n\n❌ [Excluding pages from being published](notes/ignore%20notes.md)\n\n---\n\nNow that your Quartz is live, let's figure out how to make Quartz really *yours*!\n\n\u003e Step 6: 🎨 [Customizing Quartz](notes/config.md)\n\nHaving problems? Checkout our [FAQ and Troubleshooting guide](notes/troubleshooting.md).\n","lastmodified":"2022-07-02T22:25:11.454859907Z","tags":null},"/notes/obsidian":{"title":"Obsidian Vault Integration","content":"\n## Setup\nObsidian is the preferred way to use Quartz. You can either create a new Obsidian Vault or link one that your already have.\n\n### New Vault\nIf you don't have an existing Vault, [download Obsidian](https://obsidian.md/) and create a new Vault in the `/content` folder that you created and cloned during the [setup](notes/setup.md) step.\n\n### Linking an existing Vault\nThe easiest way to use an existing Vault is to copy all of your files (directory and hierarchies intact) into the `/content` folder.\n\n## Settings\nGreat, now that you have your Obsidian linked to your Quartz, let's fix some settings so that they play well.\n\n1. Under Options \u003e Files and Links, set the New link format to always use Absolute Path in Vault.\n2. Go to Settings \u003e Files \u0026 Links \u003e Turn \"on\" automatically update internal links.\n\n![Obsidian Settings](/notes/images/obsidian-settings.png)*Obsidian Settings*\n\n## Templates\nInserting front matter everytime you want to create a new Note gets annoying really quickly. Luckily, Obsidian supports templates which makes inserting new content really easily.\n\n**If you decide to overwrite the `/content` folder completely, don't remove the `/content/templates` folder!**\n\nHead over to Options \u003e Core Plugins and enable the Templates plugin. Then go to Options \u003e Hotkeys and set a hotkey for 'Insert Template' (I recommend `[cmd]+T`). That way, when you create a new note, you can just press the hotkey for a new template and be ready to go!\n\n\u003e 👀 Step 4: [Preview Quartz Changes](notes/preview%20changes.md)","lastmodified":"2022-07-02T22:25:11.530861305Z","tags":null},"/notes/preview-changes":{"title":"Preview Changes","content":"\nIf you'd like to preview what your Quartz site looks like before deploying it to the internet, here's exactly how to do that!\n\nNote that both of these steps need to be completed.\n\n## Install `hugo-obsidian`\nThis step will generate the list of backlinks for Hugo to parse. Ensure you have [Go](https://golang.org/doc/install) (\u003e= 1.16) installed.\n\n```shell\n# Install and link `hugo-obsidian` locally\n$ go install github.com/jackyzha0/hugo-obsidian@latest\n```\n\nIf you are running into an error saying that `command not found: hugo-obsidian`, make sure you set your `GOPATH` correctly! This will allow your terminal to correctly recognize hugo-obsidian as an executable.\n\nAfterwards, start the Hugo server as shown above and your local backlinks and interactive graph should be populated!\n\n##  Installing Hugo\nHugo is the static site generator that powers Quartz. [Install Hugo with \"extended\" Sass/SCSS version](https://gohugo.io/getting-started/installing/) first. Then,\n\n```\n# Navigate to your local Quartz folder\n$ cd \u003clocation-of-your-local-quartz\u003e\n\n# Start local server\n$ make serve\n\n# View your site in a browser at http://localhost:1313/\n```\n\n\u003e 🌍 Step 5: [Hosting Quartz online!](notes/hosting.md)","lastmodified":"2022-07-02T22:25:11.530861305Z","tags":null},"/notes/primuv-and-xyzdist":{"title":"primuv and xyzdist","content":"\n### sources / further reading\n- [The joy of xyzdist() and primuv() - Toadstorm](https://www.toadstorm.com/blog/?p=465)\n- [Joy Of Vex 19 - cgwiki](https://www.tokeru.com/cgwiki/index.php?title=JoyOfVex19) \n- [1 Minute VEX II - Aaron Smith](https://aaronsmith.tv/1-Minute-VEX-II)\n\n\n","lastmodified":"2022-07-02T22:25:11.530861305Z","tags":null},"/notes/setup":{"title":"Setup","content":"\n## Making your own Quartz\nSetting up Quartz requires a basic understanding of `git`. If you are unfamiliar, [this resource](https://resources.nwplus.io/2-beginner/how-to-git-github.html) is a great place to start!\n\n### Forking\n\u003e A fork is a copy of a repository. Forking a repository allows you to freely experiment with changes without affecting the original project.\n\nNavigate to the GitHub repository for the Quartz project:\n\n📁 [Quartz Repository](https://github.com/jackyzha0/quartz)\n\nThen, Fork the repository into your own GitHub account. If you don't have an account, you can make on for free [here](https://github.com/join). More details about forking a repo can be found on [GitHub's documentation](https://docs.github.com/en/get-started/quickstart/fork-a-repo).\n\n### Cloning\nAfter you've made a fork of the repository, you need to download the files locally onto your machine. Ensure you have `git`, then type the following command replacing `YOUR-USERNAME` with your GitHub username.\n\n```shell\n$ git clone https://github.com/YOUR-USERNAME/quartz\n```\n\n## Editing\nGreat! Now you have everything you need to start editing and growing your digital garden. If you're ready to start writing content already, check out the recommended flow for editing notes in Quartz.\n\n\u003e ✏️ Step 2: [Editing Notes in Quartz](notes/editing.md)\n\nHaving problems? Checkout our [FAQ and Troubleshooting guide](notes/troubleshooting.md).\n","lastmodified":"2022-07-02T22:25:11.530861305Z","tags":null},"/notes/updating":{"title":"Updating","content":"\nHaven't updated Quartz in a while and want all the cool new optimizations? On Unix/Mac systems you can run the following command for a one-line update! This command will show you a log summary of all commits since you last updated, press `q` to acknowledge this. Then, it will show you each change in turn and press `y` to accept the patch or `n` to reject it. Usually you should press `y` for most of these unless it conflicts with existing changes you've made! \n\n```shell\nmake update\n```\n\nOr, if you don't want the interactive parts and just want to force update your local garden (this assumed that you are okay with some of your personalizations been overriden!)\n\n```shell\nmake update-force\n```\n\nOr, manually checkout the changes yourself.\n\n\u003e ⚠️ **WARNING** ⚠️\n\u003e\n\u003e If you customized the files in `data/`, or anything inside `layouts/`, your customization may be overwritten!\n\u003e Make sure you have a copy of these changes if you don't want to lose them.\n\n\n```shell\n# add Quartz as a remote host\ngit remote add upstream git@github.com:jackyzha0/quartz.git\n\n# index and fetch changes\ngit fetch upstream\ngit checkout -p upstream/hugo -- layouts .github Makefile assets/js assets/styles/base.scss assets/styles/darkmode.scss config.toml data \n```\n","lastmodified":"2022-07-02T22:25:11.534861378Z","tags":null}}