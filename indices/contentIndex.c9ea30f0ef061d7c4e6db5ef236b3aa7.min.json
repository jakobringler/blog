{"/":{"title":"fx notes","content":"\nfx notes serves as a public *second brain* for some of my visual effects, proceduralism and deep learning related notes and experiments\n\nPress `Ctrl` + `K` to search for something\n\n### Content Lists\nIf you prefer browsing the contents of this site through a list instead of a graph, you can find content lists here too:\n\n- [All Notes](/notes)\n- [[notes/Houdini |Houdini]]\n- [[notes/Deep Learning |Deep Learning]]\n- [[notes/Other |Other]]\n- [[notes/Resources |Resources]]\n\n### About\n\nHi there!\n\nIm currently working as an FX TD and created this page to document and share workflows, ideas and notes about various vfx topics as well as my recent deep learning adventures. The quality of the notes may vary greatly and there is no garantuee for correctness.\n\nHit me up if you find any mistakes or know of better ways to do certain things.\n\nI hope you find something useful!\n","lastmodified":"2022-05-21T08:30:29.491818971Z","tags":null},"/.trash/Houdini":{"title":"","content":"","lastmodified":"2022-05-21T08:30:29.491818971Z","tags":null},"/notes/Abusing-Heightfields-as-Fast-Image-Canvas":{"title":"Abusing Heightfields as Fast Image Canvas","content":"\n### The Problem:\n\nA big part of getting a machine learning model to run is to prepare and import the data in the right _shape_. Usually this shape will be some n-dimensional [[notes/Tensors |Tensor]]. \n\nWhen working with 2D image data the files are read from disk. There are tons of tools and functions in most of the DL Frameworks that convert all sorts of files to correctly shaped tensors. In Houdini however, the data at hand is most likely not in a format (.jpg .png etc.) that can be extracted easily by a premade data loading solution.\n\nTo extract the data somewhat _liveish_ without having to write anything to disk and read it back in another step, a function that reads directly from houdini geometry is more efficient.\n\nThis brings us to the main issue: Where to store the data?\n\nUnfortunately storing image data on 3D geometry isn't very efficient. Polygon grids also store connectivity information and other data which make them rather slow to work with, especially when dealing with higher resolutions. \n\nTested when trying to do [[notes/Digit Recognition in Houdini |Digit Recognition in Houdini]].\n\n### The Solution:\n\n**Heightfields** or '2D-Volumes' (weird name). \n\nThey have a grid-like topology and only store a single value per voxel instead of unnecessary connectivity information or other  data. \n\nHoudini also ships with a python function to extract voxel data quickly, which allows us to convert the 2D information into the necessary shape.\n\n```Python \n# this goes in a Python SOP\n\nimport hou\nimport numpy as np\n\nnode = hou.pwd()\ngeo = node.geometry()\n\nW = 128 # image width\nH = W   # image height\n\ncanvas = geo.prim(0) # reads the 0th primitive \n\ncanvasVoxels = canvas.allVoxels() # reads all voxel values as one big array [1, 2, ... , n]\n\ninput = np.asarray(canvasVoxels, dtype=np.float64)\ninput = input.reshape(W,H) # creates a tensor of shape [128,128,1]\n```\n\n\n","lastmodified":"2022-05-21T08:30:29.491818971Z","tags":null},"/notes/Back-Propagation":{"title":"Back Propagation","content":"\n# Back Propagation\n\n\n\n","lastmodified":"2022-05-21T08:30:29.491818971Z","tags":null},"/notes/Convolutional-Neural-Networks-CNNs":{"title":"Convolutional Neural Networks (CNNs)","content":"\n### Architecture:\n\n### Kernels:\n\n\n![[notes/images/convkernel2CC.png]]\n\n![[notes/images/convkernel_2 1.png]]\n\nRelated: [[notes/Feed Forward Networks (FFNs) |Feed Forward Networks (FFNs)]], [[notes/Recurrent Neural Networks (RNNs) |Recurrent Neural Networks (RNNs)]], [[notes/Generative Adversarial Networks (GANs) |Generative Adversarial Networks (GANs)]] \n\n\n\n\n","lastmodified":"2022-05-21T08:30:29.491818971Z","tags":null},"/notes/Deep-Learning":{"title":"Deep Learning","content":"\n### ML Basics for Technical 3D Artists / TDs:\n##### Concepts:\n- [[notes/Tensors |Tensors]]\n- [[notes/Gradient Descent |Gradient Descent]]\n- [[notes/Back Propagation |Back Propagation]]\n\n##### Model Archtiectures\n- [[notes/Feed Forward Networks (FFNs) |Feed Forward Networks (FFNs)]]\n- [[notes/Convolutional Neural Networks (CNNs) |Convolutional Neural Networks (CNNs)]]\n- [[notes/Generative Adversarial Networks (GANs) |Generative Adversarial Networks (GANs)]]\n- [[notes/Recurrent Neural Networks (RNNs) |Recurrent Neural Networks (RNNs)]]\n\n##### Data\n- Data Synthesis\n- Data Augmentation\n- Noise\n\n##### Realistic Applications\n- Compress Algorithms\n- Increase Usabiliy \u0026 Accessability\n\n### Setup Guides:\n-  [[notes/Setting up Anaconda and Houdini for 3D Deep Learning on Linux |Setting up Anaconda and Houdini for 3D Deep Learning on Linux]]\n\n### Houdini DL \"Hacks\":\n- [[notes/Abusing Heightfields as Fast Image Canvas |Abusing Heightfields as Fast Image Canvas]]\n\n### Projects \u0026 Examples:\n- [[notes/Digit Recognition in Houdini |Digit Recognition in Houdini]]\n- Sketch to Tower\n- Vegetation \u0026 Erosion\n- Wave Function Collapse Prediction\n- Neural Cellular Automata","lastmodified":"2022-05-21T08:30:29.491818971Z","tags":null},"/notes/Digit-Recognition-in-Houdini":{"title":"Digit Recognition in Houdini","content":"\nthe files can be found here: [GitHub - Houdini + PyTorch Digit Recognition](https://github.com/jakobringler/houdini_pytorch_digitrecognition)","lastmodified":"2022-05-21T08:30:29.491818971Z","tags":null},"/notes/Feed-Forward-Networks-FFNs":{"title":"Feed Forward Networks (FFNs)","content":"\n### Architecture:\n\nRelated: [[notes/Convolutional Neural Networks (CNNs) |Convolutional Neural Networks (CNNs)]], [[notes/Recurrent Neural Networks (RNNs) |Recurrent Neural Networks (RNNs)]], [[notes/Generative Adversarial Networks (GANs) |Generative Adversarial Networks (GANs)]]\n\n\n\n\n","lastmodified":"2022-05-21T08:30:29.491818971Z","tags":null},"/notes/Generative-Adversarial-Networks-GANs":{"title":"Generative Adversarial Networks (GANs)","content":"\n### Architecture\n\nRelated: [[notes/Feed Forward Networks (FFNs) |Feed Forward Networks (FFNs)]], [[notes/Convolutional Neural Networks (CNNs) |Convolutional Neural Networks (CNNs)]], [[notes/Recurrent Neural Networks (RNNs) |Recurrent Neural Networks (RNNs)]] ","lastmodified":"2022-05-21T08:30:29.491818971Z","tags":null},"/notes/Gradient-Descent":{"title":"Gradient Descent","content":"\n![[notes/images/gradientDescent.png]]\nRelated: [[notes/Back Propagation |Back Propagation]]","lastmodified":"2022-05-21T08:30:29.491818971Z","tags":null},"/notes/Houdini":{"title":"Houdini","content":"### SOPs:\n\n### VEX:\n- [[notes/VEX Snippets |VEX Snippets]]\n- [[notes/Matrix Operations |Matrix Operations]]\n\n### Deep Learning:\n- [[notes/Setting up Anaconda and Houdini for 3D Deep Learning on Linux |Setting up Anaconda and Houdini for 3D Deep Learning on Linux]]\n- [[notes/Abusing Heightfields as Fast Image Canvas |Abusing Heightfields as Fast Image Canvas]]\n","lastmodified":"2022-05-21T08:30:29.491818971Z","tags":null},"/notes/Impressum":{"title":"Impressum","content":"\n# Impressum\n\n\n\n","lastmodified":"2022-05-21T08:30:29.491818971Z","tags":null},"/notes/Imprint":{"title":"Imprint","content":"\n# Imprint\n\n[[notes/Impressum |German Version]]\n\n","lastmodified":"2022-05-21T08:30:29.491818971Z","tags":null},"/notes/Matrix-Operations":{"title":"Matrix Operations","content":"\n### coming soon\n\nrelated to:\n\nsources / further reading:\n\n","lastmodified":"2022-05-21T08:30:29.491818971Z","tags":null},"/notes/Other":{"title":"Other","content":"\n### Nuke:\n\n### Color Grading:\n\n\n\n","lastmodified":"2022-05-21T08:30:29.491818971Z","tags":null},"/notes/Recurrent-Neural-Networks-RNNs":{"title":"Recurrent Neural Networks (RNNs)","content":"\n### Architecture\n\nRelated: [[notes/Feed Forward Networks (FFNs) |Feed Forward Networks (FFNs)]], [[notes/Convolutional Neural Networks (CNNs) |Convolutional Neural Networks (CNNs)]], [[notes/Generative Adversarial Networks (GANs) |Generative Adversarial Networks (GANs)]] \n\n\n\n","lastmodified":"2022-05-21T08:30:29.491818971Z","tags":null},"/notes/Resources":{"title":"Resources","content":"# Downloads \u0026 Scripts:\n[[notes/VEX Snippets |VEX Snippets]]\n\n# Links:\n\n### CG \u0026 VFX\n##### Houdini:\n- [cgwiki - Matt Estela](https://www.tokeru.com/cgwiki/index.php?title=Houdini)\n- [procegen - Konstantin Magnus](https://procegen.konstantinmagnus.de/)\n\n##### Grooming:\n- [The Brain Extension - Iiro Kivist√∂](https://www.thebrainextension.com/)\n\n### Math:\n- [Essence of Linear Algebra - 3Blue1Brown](https://www.3blue1brown.com/topics/linear-algebra)\n\n### Deep Learning\n##### Houdini:\n[Houdini Machine Learning - Edmond Boulet-Gilly](https://www.youtube.com/watch?v=WNEEokEq-Fg\u0026list=PLSie_1zkANDbn7wCD9kifPAp5wJmok02V)\n\n","lastmodified":"2022-05-21T08:30:29.491818971Z","tags":null},"/notes/Setting-up-Anaconda-and-Houdini-for-3D-Deep-Learning-on-Linux":{"title":"Setting up Anaconda and Houdini for 3D Deep Learning on Linux","content":"\n### Installation:\n\nTo get started install [Anaconda](https://anaconda.org/) and run the following commands in your terminal:\n\n( **hou** is the name of the new enviroment and python **3.7.4** is required because this is the version used in Houdini )\n\n```bash\nconda create -n hou python=3.7.4\n```\n\n```bash\nconda activate hou\n```\n\nThen install libraries like for example [PyTorch 3D](https://github.com/facebookresearch/pytorch3d). ( For simplicities sake we will go forward with vanilla [PyTorch](https://pytorch.org/). )\n\n```bash\nconda install pytorch torchvision torchaudio cudatoolkit=11.3 -c pytorch\n```\n\nAs [jpparkeramnh](https://www.sidefx.com/profile/jpparkeramnh/) pointed out in [this](https://www.sidefx.com/forum/topic/58397/) SideFX forum post you have to export the **LD_PRELOAD** variable.\n\n```bash\nexport LD_PRELOAD=$CONDA_PREFIX/lib/libpython3.7m.so\n```\n\n### .bashrc Modifications:\n\nI also recommend sourcing Houdini in the terminal.\n\nTo do so first open the .bashrc in the terminal\n\n```bash\nnano .bashrc\n```\n\nand add the following lines to your .bashrc\n\n```bash\ncd /opt/hfs19.0/\nsource ./houdini_setup\ncd ~\nconda activate hou\nexport LD_PRELOAD=$CONDA_PREFIX/lib/libpython3.7m.so\nalias expenv='LD_PRELOAD=$CONDA_PREFIX/lib/libpython3.7m.so'\n```\n\n-   The first 3 lines run the houdini setup bash script\n-   Line 4 activates a default environment ( for me ‚Äúhou‚Äù )\n-   Line 5 exports the LD_PRELOAD varible of the currently activated environment ( hou )\n-   Line 6 creates an alias to export the currently activated environment from the terminal\n\nNow you should be able to just activate your respecitve conda environment, export the correct LD_PRELOAD variable by typing ‚Äú**expenv**‚Äù and then run houdini from there by typing ‚Äú**houdini**‚Äú.\n\nTo check if everything is running as expected open the Houdini Python shell and type:\n\n```python\nimport torch \n```\n\nIf it doesn‚Äôt give you any errors you should be good to go.\n\n\n","lastmodified":"2022-05-21T08:30:29.491818971Z","tags":null},"/notes/Tensors":{"title":"Tensors","content":"\n### What are \"Tensors\"?\n\n\n![[notes/images/tensordims.png]]\n\n### Image Tensors:\n![[notes/images/imagetensor.png]]\n","lastmodified":"2022-05-21T08:30:29.491818971Z","tags":null},"/notes/VEX-Snippets":{"title":"VEX Snippets","content":"\n### Wrangle Cheat Sheet\n\n##### Attribute to String\n```C\ns@name = \"piece_\" + itoa(i@class);\n```\n\n##### Attribute Transfer\n```C\nint posprim;\nvector param_uv;\nfloat maxdist = 10;\nfloat dist = xyzdist(1,@P,posprim,param_uv,maxdist);\nvector pos = primuv(1,\"rest\",posprim,param_uv);\nv@rest = pos;\n```\n\n##### Average Point Cloud Positions\n```C\nvector value;\nvector values[];\n\nfor (int i=0; i\u003c@numpt; i++)\n{\n\tvalue = point(geoself(), \"P\", i);\n\tappend(values,value);\n}\n  \nvector avgP = avg(values);\n\nif(@ptnum\u003e0)\n{\n\tremovepoint(geoself(), @ptnum);\n} \n\n@P = avgP;\n```\n\n##### Bias and Gain\n```C\nfunction float bias(float val; float bias) \n{\n    return (val / ((((1.0/bias) - 2.0)*(1.0 - val))+1.0));\n}\n\nfunction float gain(float val; float gain) \n{\n    if(val \u003c 0.5)\n    {\n        return bias(val * 2.0,gain)/2.0;\n    }\n    else\n    {\n        return bias(val * 2.0 - 1.0,1.0 - gain)/2.0 + 0.5;\n    }\n}\n\nfloat val = pow(val, exp); \n```\n\nsources:\n- [Michael Frederickson's Tweet](https://twitter.com/mfrederickson/status/1523148417349816320)\n- [Alan Wolfe's Blog Post](https://blog.demofox.org/2012/09/24/bias-and-gain-are-your-friend/)\n\n##### Calculate Point Density\n```C\nfloat maxdist = chf(\"maxdist\");\nint maxpts = chi(\"maxpts\");\nint points = len(nearpoints, 0, @P, maxdist, maxpts);\n\nf@density = float(points) / maxpts;\n```\n\n##### Create Name Attribute for each Prim Group\n```C\nstring grps[] = detailintrinsic(0, 'primitivegroups');\nforeach(string g; grps)\n{\n\taddprimattrib(0, g, 123);\n}\n```\n\n##### Edgefalloff\n```C\nif (@edgefalloff==1)\n{\n\tint near[] = nearpoints(0,@P,chf(\"dist\"));\n\t\n\tforeach (int pnt;near)\n\t{\n\t\tvector pntP = point(0,\"P\",pnt);\n\t\tfloat dist = fit(distance(pntP,@P),0,chf(\"dist\")*2,1,-1);\n\t\tsetpointattrib(0,\"edgefalloff\",pnt,dist,\"set\");\n\t}\n}\n```\n\n##### Expand Group Over Geo\n\n```C\nint pc = pcopen(0, 'P', @P, chf('radius'), chi('maxpts'));\n\nwhile (pciterate(pc) \u003e 0)\n{\n\tint currentpt;\t\n\tpcimport(pc, 'point.number', currentpt);\n\tsetpointgroup(0, 'group1', currentpt, 1);\n}\n```\n","lastmodified":"2022-05-21T08:30:29.491818971Z","tags":null}}