{"/":{"title":"fx notes","content":"\nPress `Ctrl` + `K` to search for something \n\nYou can use the interactive graph or the content lists below to browse the site and discover connections between notes\n\n### Content Lists\n- [All Notes](/notes)\n- [[notes/Houdini |Houdini]]\n- [[notes/Machine Learning |Machine Learning]]\n- [[notes/Projects and RnD |Projects and R\u0026D]]\n- [[notes/Resources |Resources]]\n- [[notes/Other |Other]]\n\n### About \nfx notes serves as a public *second brain* for some of my visual effects, proceduralism and machine learning related notes and experiments.\n\nIf you want to contribute or fix mistakes you can click the `Edit Source` button at the top of every page and open a pull request on GitHub.\n\nI hope you find something useful!\n\nBest,\n\nJakob\n\n[[notes/About |more]]\n\n\n\n","lastmodified":"2023-02-23T20:02:01.225120389Z","tags":null},"/.trash/Houdini":{"title":"","content":"","lastmodified":"2023-02-23T20:02:01.225120389Z","tags":null},"/notes/About":{"title":"About","content":"\nHi there!\n\nIm currently working as an FX TD and created this page to document and share workflows, ideas and notes about houdini and various other vfx topics as well as my recent deep learning adventures. \n\nThis is by no means a documentation or manual, but much more a digital personal notebook. That's why it's rather unstructured at times and also contains different summaries of already existing resources and tutorials. I try my best to link to any sources. The quality of the notes may vary greatly and there is no garantuee for correctness.\n\n[Hit me up](https://twitter.com/jakobrin) if you find any mistakes or know of better ways to do things.\n\nI hope you find something useful!\n\nBest,\n\nJakob\n","lastmodified":"2023-02-23T20:02:01.225120389Z","tags":null},"/notes/Abusing-Heightfields-as-Fast-Image-Canvas":{"title":"Abusing Heightfields as Fast Image Canvas","content":"\n### The Problem\n\nA big part of getting a machine learning model to run is to prepare and import the data in the right _shape_. Usually this shape will be some n-dimensional [[notes/Tensors |Tensor]]. \n\nWhen working with 2D image data the files are read from disk. There are tons of tools and functions in most of the DL Frameworks that convert all sorts of files to correctly shaped tensors. In Houdini however, the data at hand is most likely not in a format (.jpg .png etc.) that can be extracted easily by a premade data loading solution.\n\nTo extract the data somewhat _liveish_ without having to write anything to disk and read it back in another step, a function that reads directly from houdini geometry is more efficient.\n\nThis brings us to the main issue: Where to store the data?\n\nUnfortunately storing image data on 3D geometry isn't very efficient. Polygon grids also store connectivity information and other data which make them rather slow to work with, especially when dealing with higher resolutions. \n\nTested when trying to do [[notes/Digit Recognition in Houdini |Digit Recognition in Houdini]].\n\n### The Solution\n\n**Heightfields** or '2D-Volumes' (weird name). \n\nThey have a grid-like topology and only store a single value per voxel instead of unnecessary connectivity information or other data. \n\nHoudini also ships with a python function to extract voxel data quickly, which allows us to convert the 2D information into the necessary shape.\n\n```Python \n# this goes in a Python SOP\n\nimport hou\nimport numpy as np\n\nnode = hou.pwd()\ngeo = node.geometry()\n\nW = 128 # image width\nH = W   # image height\n\ncanvas = geo.prim(0) # reads the 0th primitive \n\ncanvasVoxels = canvas.allVoxels() # reads all voxel values as one big array [1, 2, ... , n]\n\ninput = np.asarray(canvasVoxels, dtype=np.float64)\ninput = input.reshape(W,H) # creates a tensor of shape [128,128,1]\n```\n\nSee [[notes/Tower Sketcher |\"Training a Neural Net to Understand my Drawings\"]] to find out more about the applications of this technique.\n","lastmodified":"2023-02-23T20:02:01.225120389Z","tags":null},"/notes/Attribute-Adjust-Syntax-Tricks":{"title":"Attribute Adjust Syntax Tricks","content":"\n## Setting Random Non-continuous Values\n\nYou can use the following syntax to specify a range from where the values will be picked. Set the value type to `List of Values`.\n\n```\n1-3; 5-9:0.25 \n```\n\nThis tells the node to create values from 1 to 3 with a stepsize of 1 and values from 5 to 9 with a stepsize of 0.25.\n\n---\n\nsources / further reading:\n- [Sexy Explosions | Attila Torok | Houdini 18.5 HIVE](https://www.youtube.com/watch?v=Gxfq9DZTuRM)\n- [Houdini DOCs](https://www.sidefx.com/docs/houdini/nodes/sop/attribadjustfloat.html)\n\n","lastmodified":"2023-02-23T20:02:01.225120389Z","tags":null},"/notes/Digit-Recognition-in-Houdini":{"title":"Digit Recognition in Houdini","content":"\n![[notes/images/digitRec_Banner.gif]]\n\nthe files can be found here: [GitHub - Houdini + PyTorch Digit Recognition](https://github.com/jakobringler/houdini_pytorch_digitrecognition)\n\n### sources / further reading:\n- [PyTorch Tutorial 13 - Feed-Forward Neural Network](https://www.youtube.com/watch?v=oPhxf2fXHkQ)\n- [4 pixel cam AI - Machine Learning in Houdini Tutorial](https://www.youtube.com/watch?v=WNEEokEq-Fg)","lastmodified":"2023-02-23T20:02:01.225120389Z","tags":null},"/notes/FLIP":{"title":"FLIP","content":"\n## General\n\n### Particle Velocity vs Volume Velocity\nIt's hard to have exact art directible control over the FLIP particles when working with volume velocities. It makes sense to modify the particle velocity directly in cases where detailed particle by particle control is required.\n\n### Volume Loss\n**Important Parameters**\n- Grid Scale\n- Particle Radius Scale\n\n\u003e [!Quote] Quote from SideFX Docs\n\u003e \n\u003eIf the **Particle Radius Scale** / **Grid Scale** \u003e= sqrt(3) / 2, then particles will never be under-resolved.\n\n## Small Scale\n\n### Droplets, Sheets \u0026 Tendrils\nKey Parameters:\n- Velocity Transfer (APIC Swirly)\n- Surface Tension\n- Substeps\n- Timescale\n\nWhen increasing the surface tension by itself the fluid will collapse in on itself. To prevent this substeps have to be increased. If possible this can also be countered by reducing the timescale (e.g. instead of increasing substeps from 4 to 8 the timescale could be set to 0.5). This way the simulation doesn't get more computationally expensive.\n\n\n---\n\nsources / further reading:\n- [FLIP Solver DOCs](https://www.sidefx.com/docs/houdini/nodes/dop/flipsolver.html)\n- [HOUDINI FLIP | LIQUID MORPH TUTORIAL -- Part 2 (+ projects) -  Sadjad Rabiee](https://www.youtube.com/watch?v=5sD9uTsewVI)\n- [Efficient techniques for realistic small scale Tendrils, Droplets and Sheets in Houdini - Jacktone Okore](https://www.youtube.com/watch?v=rxxR3hFYqLg)\n- [Volume Loss in FLIP SIM? Grid Scale and Particle Radius Scale - Janks](https://www.youtube.com/watch?v=JTyPcg5x6b8)\n\n\n","lastmodified":"2023-02-23T20:02:01.225120389Z","tags":null},"/notes/General-Workflow-Tips":{"title":"General Workflow Tips","content":"\n### Temporary Attributes\nWhen creating HDAs or working on bigger setups it might make sense to  prefix any temporary attributes with a special character such as `__` to make removing it later on easier e.g. by using `__*` in an attribute delete SOP. \n\nBy doing so you also ensure that you don't run into issues with incoming attributes that have the same name.\n\n### Cache Node\nThe [Cache Node](https://www.sidefx.com/docs/houdini/nodes/sop/cache.html) can be used to optimize playback and store data until anything upstream changes. Pretty simple and obvious, but somehow I learned pretty late about this small but awesome node and I still see it rarely in tutorials or other peoples shared setups.\n\n\u003e [!Quote] Quote from SideFX Docs\n\u003e \n\u003e lets you scrub otherwise sluggish animations in real time, play pop networks backwards, etc. because the animation is precomputed and stored in memory\n\n### Attribute Adjust Nodes\n- Introduced in 18.5\n- Very handy for all sorts of attribute manipulation, remapping or distorting\n- Can do unit conversion from e.g. seconds to frames\n- Check out [[notes/Attribute Adjust Syntax Tricks |Attribute Adjust Syntax Tricks]] for more\n\n\n\n\n","lastmodified":"2023-02-23T20:02:01.225120389Z","tags":null},"/notes/Gifs-for-Obsidian":{"title":"Gifs for Obsidian","content":"\n## ffmpeg from mp4 to pngs\n// bash\n```bash\nffmpeg -i video.mp4 -vf scale=1280:720,fps=15 pngs/video.%04d.png\n```\n\n## gifski from pngs to good quality gif\n// bash\n```bash\ngifski -o video.gif -W 1280 -H 720 pngs/video.*.png\n```\n\n\n---\n\nsources / further reading:\n- [FFmpeg: high quality animated GIF?](https://stackoverflow.com/questions/42980663/ffmpeg-high-quality-animated-gif)\n- [Gifski](https://gif.ski/)\n\n","lastmodified":"2023-02-23T20:02:01.225120389Z","tags":null},"/notes/Git-Basics":{"title":"Git Basics","content":"\n## Concept\n...\n\n## Workflow\n1. pull latest\n2. create new branch\n3. do work\n4. rebase against main/master\n\t1. resolve conflicts\n5. push to remote\n6. raise pull request\n7. discuss\n8. merge\n\n## Setup\n### Initializing Git Repo:\n// create git repo in current dir:\n\n```bash\ngit init . \n```\n\n// get version\n\n```bash\ngit --version\n```\n\n### Staging Files\n// add files to be tracked by git\n\n```bash\ngit add filename\n```\n\nThis marks the file and tells git to pay attention to it when commiting to the commit history\n\n// add all files from this directory and downwards\n\n```bash\ngit add .\n```\n\n// stage all files in repo (also upwards)\n\n```bash\ngit add -A\n```\n\n// unstage files\n\n```bash\ngit rm -r --cached filename\n\ngit rm -r --cached .\n```\n\n### Status\n// get insight into which files are staged, commited or untracked\n\n```bash\ngit status\n```\n\n### Configuration\n// configure user info etc.\n\n```bash\ngit config --global user.name \"[name]\"\n\ngit config --global user.email \"[email address]\"\n\ngit config --global color.ui auto\n```\n\n## Commit, Push \u0026 Pull\n## Commits\nLike a save point for all staged files\n\n```bash\ngit commit -m \"message to describe what is being commited\"\n```\n\n// get overview of commits \n\n```bash \ngit log\n```\n\n// compact layout\n\n```bash\ngit log --oneline\n```\n\n// show specifics of a commit\n\ncopy COMMITHASH from log and dod\n\n```bash\ngit show COMMITHASH\n```\n\n// show changes since last commit\n\n```bash\ngit diff\n```\n\n// add messages after commit\n\n```bash\ngit commit --amend -m \"message\"\n```\n\n### Branches\n\n\u003e Branches are an important part of working with Git. Any commits you make will be made on the branch you’re currently “checked out” to. Use `git status` to see which branch that is.\n\n// get current branch\n\n```bash\ngit branch\n```\n\n// show all branches\n\n```bash\ngit branch -a\n```\n\n// show remote branches\n\n```bash\ngit branch -r\n```\n\n// rename branch to main\n\n```bash\ngit branch -M main\n```\n\n// create branch\n\n```bash\ngit branch branchname\n```\n\n// switch branch\n\n```bash\ngit checkout branchname\n```\n\n// switch and create branch\n\n```bash\ngit checkout -b branchname\n```\n\n// switch to main\n\n```bash\ngit checkout -\n```\n\n// delete branch\n\n```bash\ngit branch -d branchname\n```\n\n### Push\n// push the repository to the remote github repo\n\n```bash\ngit remote add origin git@github.com:...\n```\n\n```bash\ngit push -u origin main\n```\n\n// push new branch to remote\n\n```bash\ngit push --set-upstream origin branchname\n```\n\nor\n\n```bash\ngit push -u origin branchname \n```\n\n## GitHub\n### Configure SSH Keys\nIf you can't push to your remote repo you might have to configure an ssh access\n\n-\u003e [GitHub SSH Docs](https://docs.github.com/en/authentication/connecting-to-github-with-ssh)\n\n### Clone from Remote\n// download / mirror remote repo to local machine\n\n```bash\ngit clone https://github.com/username/reponame.git\n```\n\n## Pull\n// download changes from remote server \n\n```\ngit pull\n```\n\n// get from specific branch \n\n```bash\ngit pull origin main\n```\n\n## Pull Requests\nask the repository owner on e.g. github to merge your changes to the main/master branch\n\n## Merging\n### Merge\n// merge branch to current branch (main)\n\n```bash\ngit merge branchname\n```\n\n### Rebase\n\nAssume the following history exists and the current branch is \"topic\":\n\n```\n          A---B---C topic\n         /\n    D---E---F---G master\n```\n\nFrom this point, the result of either of the following commands:\n\n//update current branch with changes that happend on master in the mean time\n```bash\ngit rebase master\ngit rebase master topic\n```\n\nwould be:\n\n```\n                  A'--B'--C' topic\n                 /\n    D---E---F---G master\n```\n\n**NOTE:** The latter form is just a short-hand of `git checkout topic` followed by `git rebase master`. When rebase exits `topic` will remain the checked-out branch.\n\n## Misc\n### .gitignore file\n\n\u003e Sometimes it may be a good idea to exclude files from being tracked with Git. This is typically done in a special file named `.gitignore`. You can find helpful templates for `.gitignore` files at [github.com/github/gitignore](https://github.com/github/gitignore).\n\n### Submodules\nto be able to use git repos inside other git repos use submodules:\n\n// install a git repo as a submodule into another repo\n\n```bash\ngit submodule add https://github.com/username/reponame\n```\n\nwhen cloning repos with submodules you get the folders but not the files\n\n// to get the files of the submodules\n\n```bash\ngit submodule init\ngit submodule update\n```\n\n// do it all in one step\n\n```bash\n\ngit clone --recurse-submodules https://github.com/username/reponame\n```\n\n[Submodules - Git Book](https://git-scm.com/book/en/v2/Git-Tools-Submodules)\n\n---\n\nsources / further reading:\n- [Git Cheat Sheet](https://training.github.com/downloads/github-git-cheat-sheet/)\n- [Git Book](https://git-scm.com/book/en/v2/)\n- [Git and GitHub Tutorial For Beginners | Full Course [2021] [NEW]](https://www.youtube.com/watch?v=3fUbBnN_H2c)\n- [Git MERGE vs REBASE](https://www.youtube.com/watch?v=CRlGDDprdOQ)\n- [Git Rebase DOCs](https://git-scm.com/docs/git-rebase)\n\n","lastmodified":"2023-02-23T20:02:01.225120389Z","tags":null},"/notes/HDA-Parameters":{"title":"HDA Parameters","content":"\n### Hiding or Disabling Parameters\neach parameter has a 'Disable When' \u0026 'Hide When' option where specific rules can be specified.\n\nSyntax:\n\n{ parametername == VALUE }\n\nalso accepts != \u003e \u003c \n\n### Executing Python Scripts\nTo write a HDA specific script you can define it in the PythonModule on the scripts page in the type properties. To run it you have to call the following command on any parameter of that HDA in the 'Callback Script' field.\n\n```Python\nhou.pwd.FUNCTION()\n```\n","lastmodified":"2023-02-23T20:02:01.225120389Z","tags":null},"/notes/Houdini":{"title":"Houdini","content":"\n### VEX\n- [[notes/VEX Snippets |VEX Snippets]]\n- [[notes/UsefulMathNumbers |Useful Math \u0026 Numbers]]\n- [[notes/WaveExpressions |Wave Expressions]]\n- [[notes/Vector Shenanigans |Vector Shenanigans]]\n- [[notes/Quaternion-Euler-Rotations |Quaternion \u0026 Euler Rotations]]\n- [[notes/Matrix Operations |Matrix Operations]]\n- [[notes/primuv and xyzdist |primuv \u0026 xyzdist]]\n- [[notes/IrregularGridAlgorithms |Algorithms for Irregular Grids]]\n\n### SOPs\n- [[notes/SOP Solver |SOP Solver]]\n\n### FX\n- [[notes/General Workflow Tips |General Workflow Tips]]\n- [[notes/Vocabulary |Vocabulary]]\n- [[notes/FLIP |FLIP]]\n- [[notes/VELLUM |VELLUM]]\n- [[notes/PYRO |PYRO]]\n\n### Unusual FX / Phenomena\n- [[notes/Reaction Diffusion |Reaction Diffusion]]\n- [[notes/Strange Attractors |Strange Attractors]]\n\n### Rendering\n- [[notes/Redshift#Redshift in Houdini |Redshift in Houdini]]\n- [[notes/Karma |Karma]]\n\n### HDAs\n- [[notes/HDA Parameters |Parameters]]\n\n### USD\n- [[notes/USD Basics |USD Basics]]\n\n### Python\n- [[notes/Python In Houdini |Python In Houdini]]\n- [[notes/Scripting in Houdini |Scripting in Houdini - Talk Notes]]\n- [[notes/VDBs and Voxels |VDBs and Voxels]]\n\n### Machine Learning\n- [[notes/ML Castles |ML Castles]]\n\t- [[notes/Tower Sketcher |Training a Neural Net to Understand Sketches]]\n\t- [[notes/Vegetation and Erosion Prediction |Vegetation and Erosion Prediction on Heightfields using GANs]]\n- [[notes/Setting up Anaconda and Houdini for 3D Deep Learning on Linux |Setting up Anaconda and Houdini for 3D Deep Learning on Linux]]\n- [[notes/Abusing Heightfields as Fast Image Canvas |Abusing Heightfields as Fast Image Canvas]]\n\n### Misc\n- [[notes/Today I Learned |\"Today I Learned\" - Compilation]]\n- [[notes/Op Operators |Op Operators]]\n- [[notes/OpenCL in Houdini |OpenCL]]\n- [[notes/Hscript |Hscript]]\n\n### Issues \u0026 Fixes\n- [[notes/Houdini Crash Parsec |Houdini Crash Issue when using Virtual Displays with Parsec]]\n\n","lastmodified":"2023-02-23T20:02:01.225120389Z","tags":null},"/notes/Houdini-Crash-Parsec":{"title":"Houdini Crash Issue when using Virtual Displays with Parsec","content":"\nTo prevent the crash add the following line to your `houdini.env`.\n\n```bash\nHOUDINI_USE_HFS_OCL=0\n```\n\n---\n\nsources / further reading:\n- [Reddit Post with same Issue](https://www.reddit.com/r/Houdini/comments/nuy6st/houdini_and_parsec_remote_pc_houdini_crashes_with/https://www.reddit.com/r/Houdini/comments/nuy6st/houdini_and_parsec_remote_pc_houdini_crashes_with/)\n- [Houdini Environment Variables](https://www.sidefx.com/docs/houdini/ref/env.html)\n\n","lastmodified":"2023-02-23T20:02:01.225120389Z","tags":null},"/notes/Hscript":{"title":"Hscript","content":"\n### Saving HIPs as text files\n\nKirill Kovalevskiy shared this technique in his [blog](https://kiko3d.wordpress.com/2015/03/19/converting-houdini-not-commercial-files/). Check it out for a longer detailed explanation!\n\n##### Writing Files\n// in hscript textport\n\n```bash\nopscript -G -r / \u003e $TEMP/temp.cmd\n```\n\n##### Reading Back\n// in hscript textport\n\n```bash\ncmdread $TEMP/temp.cmd\n```\n\n\n---\n\nsources / further reading:\n- [opscript DOCs](https://www.sidefx.com/docs/houdini/commands/opscript.html)\n- [Converting Houdini Not Commercial Files - Kiko3d](https://kiko3d.wordpress.com/2015/03/19/converting-houdini-not-commercial-files/)\n- [cmdread DOCs](https://www.sidefx.com/docs/houdini/commands/cmdread.html)\n\n","lastmodified":"2023-02-23T20:02:01.225120389Z","tags":null},"/notes/Legal":{"title":"Legal / Impressum","content":"\nAngaben gem. § 5 TMG:\n\nRingler, Jakob\n\nKontaktaufnahme:\n\nE-Mail: [fxnotes@proton.me](mailto:fxnotes@proton.me)\n\n**Haftungsausschluss – Disclaimer:**\n\nHaftung für Inhalte\n\nAlle Inhalte unseres Internetauftritts wurden mit größter Sorgfalt und nach bestem Gewissen erstellt. Für die Richtigkeit, Vollständigkeit und Aktualität der Inhalte können wir jedoch keine Gewähr übernehmen. Als Diensteanbieter sind wir gemäß § 7 Abs.1 TMG für eigene Inhalte auf diesen Seiten nach den allgemeinen Gesetzen verantwortlich. Nach §§ 8 bis 10 TMG sind wir als Diensteanbieter jedoch nicht verpflichtet, übermittelte oder gespeicherte fremde Informationen zu überwachen oder nach Umständen zu forschen, die auf eine rechtswidrige Tätigkeit hinweisen. Verpflichtungen zur Entfernung oder Sperrung der Nutzung von Informationen nach den allgemeinen Gesetzen bleiben hiervon unberührt.\n\nEine diesbezügliche Haftung ist jedoch erst ab dem Zeitpunkt der Kenntniserlangung einer konkreten Rechtsverletzung möglich. Bei Bekanntwerden von den o.g. Rechtsverletzungen werden wir diese Inhalte unverzüglich entfernen.\n\nHaftungsbeschränkung für externe Links\n\nUnsere Webseite enthält Links auf externe Webseiten Dritter. Auf die Inhalte dieser direkt oder indirekt verlinkten Webseiten haben wir keinen Einfluss. Daher können wir für die „externen Links“ auch keine Gewähr auf Richtigkeit der Inhalte übernehmen. Für die Inhalte der externen Links sind die jeweilige Anbieter oder Betreiber (Urheber) der Seiten verantwortlich.\n\nDie externen Links wurden zum Zeitpunkt der Linksetzung auf eventuelle Rechtsverstöße überprüft und waren im Zeitpunkt der Linksetzung frei von rechtswidrigen Inhalten. Eine ständige inhaltliche Überprüfung der externen Links ist ohne konkrete Anhaltspunkte einer Rechtsverletzung nicht möglich. Bei direkten oder indirekten Verlinkungen auf die Webseiten Dritter, die außerhalb unseres Verantwortungsbereichs liegen, würde eine Haftungsverpflichtung ausschließlich in dem Fall nur bestehen, wenn wir von den Inhalten Kenntnis erlangen und es uns technisch möglich und zumutbar wäre, die Nutzung im Falle rechtswidriger Inhalte zu verhindern.\n\nDiese Haftungsausschlusserklärung gilt auch innerhalb des eigenen Internetauftrittes „_Name Ihrer Domain_“ gesetzten Links und Verweise von Fragestellern, Blogeinträgern, Gästen des Diskussionsforums. Für illegale, fehlerhafte oder unvollständige Inhalte und insbesondere für Schäden, die aus der Nutzung oder Nichtnutzung solcherart dargestellten Informationen entstehen, haftet allein der Diensteanbieter der Seite, auf welche verwiesen wurde, nicht derjenige, der über Links auf die jeweilige Veröffentlichung lediglich verweist.\n\nWerden uns Rechtsverletzungen bekannt, werden die externen Links durch uns unverzüglich entfernt.\n\nUrheberrecht\n\nDie auf unserer Webseite veröffentlichten Inhalte und Werke unterliegen dem deutschen Urheberrecht ([http://www.gesetze-im-internet.de/bundesrecht/urhg/gesamt.pdf](http://www.gesetze-im-internet.de/bundesrecht/urhg/gesamt.pdf)) . Die Vervielfältigung, Bearbeitung, Verbreitung und jede Art der Verwertung des geistigen Eigentums in ideeller und materieller Sicht des Urhebers außerhalb der Grenzen des Urheberrechtes bedürfen der vorherigen schriftlichen Zustimmung des jeweiligen Urhebers i.S.d. Urhebergesetzes ([http://www.gesetze-im-internet.de/bundesrecht/urhg/gesamt.pdf](http://www.gesetze-im-internet.de/bundesrecht/urhg/gesamt.pdf) ). Downloads und Kopien dieser Seite sind nur für den privaten und nicht kommerziellen Gebrauch erlaubt. Sind die Inhalte auf unserer Webseite nicht von uns erstellt wurden, sind die Urheberrechte Dritter zu beachten. Die Inhalte Dritter werden als solche kenntlich gemacht. Sollten Sie trotzdem auf eine Urheberrechtsverletzung aufmerksam werden, bitten wir um einen entsprechenden Hinweis. Bei Bekanntwerden von Rechtsverletzungen werden wir derartige Inhalte unverzüglich entfernen.\n\nDieses [Impressum](https://jurarat.de/muster-impressum) wurde freundlicherweise von [jurarat.de](https://jurarat.de/) zur Verfügung gestellt.\n\n","lastmodified":"2023-02-23T20:02:01.225120389Z","tags":null},"/notes/Lua":{"title":"Lua","content":"\n### Syntax\n\n```lua\nprint(\"hello world\")\n\n-- comment\n\n--[[\nmultiline \ncomment\n]]--\n\nlocal var = 1 -- local var (can only be accessed inside script)\n\nlocal name = \"Jack\"\n\nprint(\"My name is: \" .. name .. \".\") -- insert variables in print strings\n\nname = nil -- clears memory\n\ndescripting = [[multi\n\tline\nstring\n]] -- multi lines strings\n\nVAR = 2 -- global variable starts with capital letter\n\n_G.var = 2 --makes sure its global even if its lower case\n\nif true then -- if statement\n\tprint(\"something\")\nend\n\n--[[\n\t==\n\t\u003c=\n\t\u003e=\n\t~=\n\t!=\n\t\u003c\n\t\u003e\n]]--\n\nif (a \u003e b ) and (a \u003e c ) then -- combine booleans with and / or\n\tprint(\"something\")\nend\n\nif (a \u003e b ) or (a \u003e c ) then\n\tprint(\"something else\")\nelse\n\tprint(\"something more else\")\nend\n\nlocal age = 33\nlocal old = age \u003e 30 and true or false -- returns true if age over 30\n\n-- for loops\n\nfor i = 1, 10, 1 do -- for (current iteration), (iterations), (stepsize)\n\tprint(i)\nend\n\nfor i = 1, 10 do -- works too. default step size is 1\n\tprint(i)\nend\n\nfor i = 10, 1, -1 do -- reverse loop\n\tprint(i)\nend\n\nlocal arr = {2, 3, 45, 65676, 34, 21, 2, 30}\n\nfor i = 1, #arr do -- loop over array\n\tprint(arr[i])\nend\n\nlocal n = 10\n\nwhile n \u003e 0 do\n\tprint(\"foo\")\n\tn = n -1\nend\n\n------- functions\n\nlocal function fn() -- local\n\tlocal x = 1\n\treturn foo\nend\n\n-- x cant be accessed outside of the function\n\nfunction globalfn(input) -- global\n\treturn input * input\nend\n\nlocal add10 = function(number) -- define function as variable\n\tlocal outcome = 10 + number\n\treturn outcome\nend\n\nprint(add10(5))\n-- output: 15\n\nlocal function Pet(name)\n\tname = name or \"Default\" -- set default values if nothing is entered\n\treturn name\nend\n```\n\n### Operators\n\n```lua\n--[[\n\t__add = +\n\t__sub = -\n\t__mul = *\n\t__div = /\n\t__mod = %\n\t__pow = ^\n\t__concat = ..\n\t__len = #\n\t__eq = ==\n]]--\n```\n\n### User Input\n\n```lua\nprint(\"Type something:\")\nlocal input = io.read() \nprint(\"You wrote: \" .. input)\n\nio.write(\"Type something:\") -- can be answered in same line\nprint(\"You wrote: \" .. input)\n\n```\n\n### Arrays / \"Tables\"\n\n```lua\nlocal arr = {1, 3, 51, 9, 17}\n\ntable.sort(arr)\n\nfor i = 1, #arr do \n\tprint(arr[i])\nend\n\ntable.insert(arr, 2, \"foo\")\n\ntable.remove(arr, 4)\n\nprint(table.concat(arr, \", \"))\n-- output: 1, foo, 3, 17, 51\n\nlocal arr2 = {\n\t{1, 2, 3},\n\t{4, 5, 6},\n\t{7, 8, 9}\n} -- nested arrays\n\nprint(arr[1][1])\n\n  \n\nfor i = 1, #arr2 do\n\tfor j = 1, #arr2[i] do\n\t\tprint(arr2[i][j])\n\tend\nend\n\n```\n\n### Recursion\n\ncall function in itself\n\n```lua\nlocal function counter(num, enum)\n\tlocal count = num + 1\n\t\n\tif(count \u003c enum) then\n\t\tprint(count)\n\t\treturn counter(count, enum)\n\tend\nend\n\nprint(counter(10, 15))\n\n-- output: 11, 12, 13, 14\n```\n\n### Key - Value Pairs\n\n```lua\nlocal function sum(...) -- (...) allows an infinite amount of arguments\n\tlocal sums = 0\n\t\n\tfor key, value in pairs({...}) do -- swirly braces transforms the arguments into a table\n\t\tprint(key, value)\n\tend\nend\n\nsum(10, 5, 6 ,4, 12)\n\n-- output:\n-- 1  10\n-- 2  5\n-- 3  6\n-- 4  4\n-- 5  12\n```\n\n### Coroutines\n\nuseful to wait for other part of programm. e.g. unpacking files \n\n```lua\nlocal routine_1 = coroutine.create(\n\tfunction ()\n\t\tfor i = 1, 10, 1 do\n\t\t\tprint(\"(Routine 1): \" .. i)\n\t\t\t\n\t\t\tif i == 5 then\n\t\t\t\tcoroutine.yield()\n\t\t\tend\n\t\tend\nend\n)\n\nlocal routine_func = function ()\n\tfor i = 11, 20 do\n\t\tprint(\"(Routine 2): \".. i)\n\tend\nend\n\nlocal routine_2 = coroutine.create(routine_func)\n\ncoroutine.resume(routine_1)\ncoroutine.resume(routine_2)\ncoroutine.resume(routine_1)\nprint(coroutine.status(routine_1))\n```\n\n### File I/O\n\n```lua\nio.output(\"file.txt\")\nio.write(\"Hello World\")\nio.close()\n\nio.read(5) -- reads 5 characters\n\n\nlocal file = io.open(\"file.txt\", \"w\") -- \"w\" write, \"r\" read, \"a\" append\nlocal reads = file:read(\"*all\")\nfile:write(\"foo bar\")\nfile:close()\n```\n\n### OS Module\n\n```lua\nprint(os.time())\n\n-- deleting stuff\nos.remove(\"path/file.ext\")\n\n-- exec commands\nos.execute(\"whoami\")\n\n-- time code\nlocal start = os.clock()\n\nfor i = 1, 10000 do\n\tprint(i)\nend\n\nprint(os.clock() - start)\n\n-- exit programm\nos.exit()\n```\n\n### Custom Modules\n\n```lua\nmymodule = {}\n\nfunction mymodule.add(x, y)\n\treturn x + y\nend\n\nfunction mymodule.power(x, y)\n\treturn x ^ y\nend\n\nreturn mymodule\n```\n\n```lua\nlocal mod = require(\"mymodule\")\nprint(mod.add(5, 10))\nprint(mod.power(5, 10))\n```\n\n### Metamethods\n\n```lua\nlocal function addTableValues(x, y)\n\treturn x.num + y.num\nend\n\nlocal metatable = {\n\t__add = addTableValues,\n\t__sub = function (x, y)\n\t\treturn x.num - y.num\n\tend\n}\n\nlocal tbl1 = { num = 50 }\nlocal tbl2 = { num = 10 }\n\nsetmetatable(tbl1, metatable)\n\nlocal ans = tbl1 - tbl2\n\nprint(ans)\n```\n\n### More\n[[notes/Lua Scripting in Resolve |Lua Scripting in Resolve]]\n\n---\n\nsources / further reading:\n- [Lua.org](https://www.lua.org/)\n- [Full Lua Programming Crash Course - Beginner to Advanced](https://www.youtube.com/watch?v=1srFmjt1Ib0)\n- [LuaRocks](https://www.youtube.com/watch?v=1srFmjt1Ib0)\n\n","lastmodified":"2023-02-23T20:02:01.225120389Z","tags":null},"/notes/Lua-Scripting-in-Resolve":{"title":"Lua Scripting in Resolve","content":"\nOverview and snippets for [[notes/Lua |Lua]] coding in DaVinci Resolve.\n\n\u003e A good API overview and multiple examples can be found in Deric's [Unofficial DaVinci Resolve Scripting Documentation](https://github.com/deric/DaVinciResolve-API-Docs)\n\n## Basics\n\n### Getting Base Objects\n\n```lua\nresolve = Resolve()\nprojectManager = resolve:GetProjectManager()\nproject = projectManager:GetCurrentProject()\nmediaPool = project:GetMediaPool()\nrootFolder = mediaPool:GetRootFolder()\nclips = rootFolder:GetClips()\ntimelineCount = project:GetTimelineCount()\n```\n\n### Switching Pages\n\n```lua\nresolve:OpenPage(\"color\") -- (\"media\", \"cut\", \"edit\", \"fusion\", \"color\", \"fairlight\", \"deliver\").\n```\n\n\n\n---\n\nsources / further reading:\n- [Unofficial DaVinci Resolve Scripting Documentation](https://github.com/deric/DaVinciResolve-API-Docs)\n\n","lastmodified":"2023-02-23T20:02:01.225120389Z","tags":null},"/notes/ML-Castles":{"title":"ML Castles","content":"\n![[notes/images/ML_Castles_Banner.png]]\n\n## Machine Learning Supported Procedural Castles\nis a project I did for my bachelor thesis. The goal was to find out how machine learning could support procedural content genertation.\nI created a procedural castle \"generator\", which is enhanced by two types of ML systems.\n\n![[notes/images/CastleDemo.gif]]\n\nThe project files and code can be found on GitHub: [H_ML_Castles](https://github.com/jakobringler/H_ML_Castles)\n\n### ML 1: Training a Neural Net to Understand my Sketches\n\nA Machine learning network was used to provide a new kind of user interface to control parameters of an HDA, which procedurally generates towers.\n\n![[notes/images/TowerSketcher.gif]]\n\nmore details can be found here: [[notes/Tower Sketcher |Tower Sketcher]]\n\n### ML 2: Predicting Heightfield Data using cGANs\n\nThis idea isn't anything new and was already shown in this [SideFX demo](https://www.sidefx.com/tutorials/machine-learning-data-preparation/). Since heightfields are essentially images (2D arrays) you can use conditional GANs to translate between one image to another.\n\nYou can for example translate height data from a base terrain to an eroded version of that terrain, like shown in the SideFX demo.\n\n![[notes/images/ErosionPrediction.gif]]\n\nIn the same way you can then use the erosion data (height, water, sediment etc.) to predict where certain types of vegetation should appear. The model spits out different colored masks, which are used to scatter points for different plant or tree models.\n\n![[notes/images/VegetationDemo.gif]]\n\nmore details can be found here: [[notes/Vegetation and Erosion Prediction |Vegetation Erosion Prediction]]\n\n### Results\n\n![[notes/images/Castle1.png]]\n![[notes/images/Castle2.png]]\n![[notes/images/TopViewUserInput.png]]","lastmodified":"2023-02-23T20:02:01.225120389Z","tags":null},"/notes/Machine-Learning":{"title":"Machine Learning","content":"\n## Houdini\n\n### Projects \u0026 Examples\n- [[notes/ML Castles |ML Castles]]\n\t- [[notes/Tower Sketcher |Tower Sketcher]]\n\t- [[notes/Vegetation and Erosion Prediction |Vegetation \u0026 Erosion Prediction]]\n- [[notes/Digit Recognition in Houdini |Digit Recognition in Houdini]]\n\n### Setup Guides\n-  [[notes/Setting up Anaconda and Houdini for 3D Deep Learning on Linux |Setting up Anaconda and Houdini for 3D Deep Learning on Linux]]\n\n### Houdini DL \"Hacks\"\n- [[notes/Abusing Heightfields as Fast Image Canvas |Abusing Heightfields as Fast Image Canvas]]\n\n## Nuke\n- [[notes/cat Files |cat Files]]\n\n## Coming Soon\n\n### ML Basics for Technical 3D Artists / TDs\n##### Concepts\n- [[notes/Neural Networks |Neural Networks]]\n- [[notes/Tensors |Tensors]]\n- [[notes/Gradient Descent |Gradient Descent]]\n- [[notes/Back Propagation |Back Propagation]]\n\n##### Model Archtiectures\n- [[notes/Feed Forward Networks (FFNs) |Feed Forward Networks (FFNs)]]\n- [[notes/Convolutional Neural Networks (CNNs) |Convolutional Neural Networks (CNNs)]]\n- [[notes/Generative Adversarial Networks (GANs) |Generative Adversarial Networks (GANs)]]\n- [[notes/Recurrent Neural Networks (RNNs) |Recurrent Neural Networks (RNNs)]]\n- [[notes/Autoencoders |Autoencoders]]\n- [[notes/Neural Radiance Fields |Neural Radiance Fields (NeRFs)]]\n\n\n\n##### Data\n- Data Synthesis\n- Data Augmentation\n- Noise\n","lastmodified":"2023-02-23T20:02:01.225120389Z","tags":null},"/notes/Matrix-Operations":{"title":"Matrix Operations","content":"\n## Basics\n\n### Dimensions\n\nHoudini most commonly uses 3x3 or 4x4 matrices to store transformation data\n\n3x3 -\u003e rotation and scale\n4x4 -\u003e rotation, scale and translation\n\n### Identity Matrix\n\nThe identity matrix is sort of the base matrix and means no transformation is applied. The diagonal ones store the scale value.\n\n$$\n\\bigg[\\begin{array}{rcl}\n\t1\u00260\u00260\u00260 \\\\\n\t0\u00261\u00260\u00260 \\\\\n\t0\u00260\u00261\u00260 \\\\\n\t0\u00260\u00260\u00261 \\\\\n\\end{array}\\bigg]\n$$\n\nIt can be created in VEX by calling `ident()`.\n\n```C#\nmatrix xform = ident();\n```\n\n### Translation\n\n```C#\nmatrix xform = ident();\nvector translation = chv(\"translation\");\n\ntranslate(xform, translation);\n\n@P *= xform;\n```\n\nThis is what happens under the hood:\n\n```C#\nvector t = chv('translate');\n\nmatrix T = set(set(1, 0, 0, 0), set(0, 1, 0, 0), set(0, 0, 1, 0), set(t.x, t.y, t.z, 1));\n\n@P *= T;\n```\n\n### Rotations\n\nQuaternion Rotations\n\n```C#\nmatrix xform = ident();\nfloat angle = radians(chf(\"angle\"));\nvector axis = chv(\"axis\");\n\nrotate(xform, angle, axis);\n\n@P *= xform;\n```\n\nEuler Rotations\n\n```C#\nvector rot = radians(chv('rotate'));\n\nmatrix3 Rx = set(1,0,0, 0,cos(rot.x),-sin(rot.x), 0,sin(rot.x),cos(rot.x));\n\nmatrix3 Ry = set(cos(rot.y),0,sin(rot.y), 0,1,0, -sin(rot.y),0,cos(rot.y));\n\nmatrix3 Rz = set(cos(rot.z),-sin(rot.z),0, sin(rot.z),cos(rot.z),0 ,0,0,1);\n\n@P = @P*Rx*Ry*Rz;\n```\n\nfor more details have a look at [[notes/Quaternion-Euler-Rotations |Quaternions and Euler Rotations]]\n\n### Scale\n\n```C#\nmatrix xform = ident();\nvector scale = chv(\"scale\");\n\nscale(xform, scale);\n\n@P *= xform;\n```\n\n### Order of Operations for Transformations\n\nThe default of the transform node and in most 3D packages ist `SRT`, which means first **Scaling** the object in place and then **Rotating** it before **Translating** it's position.\n\n### Permutations\n\n### Shear\n\n---\n\n## Usecases\n\n### Extracting a Transformation Matrix with VEX\n\nSometimes it's desirable to lock an animated mesh to the origin to perform further operations. To move it from it's position in world space to the origin we need it's transformation matrix.\n\n[Paweł Rutkowski](https://vimeo.com/284712920) has a great video on the topic. The following is basically a writeup of the contents of his video for my own memory and to easily get back to it.\n\nTo create a transformation matrix we first have to create a local coordinate system that moves with the object. To do so we have to identify 2 Points that don't deform and calculate a vector between the two. First isolate the the 2 points by deleting everything else.\n\n![[notes/images/Pasted image 20220602234539.png]]\n\n```C#\n// this goes in point wrangle 1\n\nvector P1 = point(0, \"P\", 0);\nvector P2 = point(0, \"P\", 1);\nvector up = {0,1,0};\n\nvector X = normalize(P2-P1);\nvector Z = normalize(cross(X, up));\nvector Y = normalize(cross(X, Z));\n\nvector P = P1 + (P2 - P1) / 2;\n```\n$$\n\\begin{array}{rcl}\n\t\\color{red} x-Axis \\\\\n\t\\color{green} y-Axis \\\\\n\t\\color{blue} z-Axis \\\\\n\t\\color{orange} Position \\\\\n\\end{array}\n\\equiv\n\\bigg[\\begin{array}{rcl}\n\t\\color{red} 1\u0026\\color{red}0\u0026\\color{red}0\u00260 \\\\\n\t\\color{green}0\u0026\\color{green}1\u0026\\color{green}0\u00260 \\\\\n\t\\color{blue}0\u0026\\color{blue}0\u0026\\color{blue}1\u00260 \\\\\n\t\\color{orange}0\u0026\\color{orange}0\u0026\\color{orange}0\u00261 \\\\\n\\end{array}\\bigg]\n$$ \n\nWe don't really need the fourth column but 3x4 matrices dont \"exist\" in VEX. \n\n```C#\n// this continues the first point wrangle\n\nmatrix transform = set(X, Y, Z, P); // create matrix\n```\n\nHowever this will give us the following matrix with the ones in the fourth column\n\n\n$$\n\\bigg[\\begin{array}{rcl}\n\t\\color{red} X.x\u0026\\color{red}X.y\u0026\\color{red}X.z\u00261 \\\\\n\t\\color{green} Y.x\u0026\\color{green}Y.y\u0026\\color{green}Y.z\u00261 \\\\\n\t\\color{blue} Z.x\u0026\\color{blue}Z.y\u0026\\color{blue}Z.z\u00261 \\\\\n\t\\color{orange} P.x\u0026\\color{orange}P.y\u0026\\color{orange}P.z\u00261 \\\\\n\\end{array}\\bigg]\n$$\n\nTo fix this we can use the setcomp() function.\n\n```C#\n// this continues the first point wrangle\n\nsetcomp(transform, 0, 0, 3); // set row 1 col 4 to 0\nsetcomp(transform, 0, 1, 3); // set row 2 col 4 to 0\nsetcomp(transform, 0, 2, 3); // set row 3 col 4 to 0\n\n4@transform = transform; // create matrix attribute\n```\n\nWhich will give us the correct transformation matrix:\n\n$$\n\\bigg[\\begin{array}{rcl}\n\t\\color{red} X.x\u0026\\color{red}X.y\u0026\\color{red}X.z\u00260 \\\\\n\t\\color{green} Y.x\u0026\\color{green}Y.y\u0026\\color{green}Y.z\u00260 \\\\\n\t\\color{blue} Z.x\u0026\\color{blue}Z.y\u0026\\color{blue}Z.z\u00260 \\\\\n\t\\color{orange} P.x\u0026\\color{orange}P.y\u0026\\color{orange}P.z\u00261 \\\\\n\\end{array}\\bigg]\n$$\nto move the object to the center the inverted matrix has to be multiplied with the position.\n\n```C#\n// this goes in point wrangle 2\n\nmatrix transform = point(1, \"transform\", 0);\n\nv@P *= invert(transform);\nv@N *= matrix3(invert(transform));\nv@v *= matrix3(invert(transform));\n```\n\n##### Download: [File](https://github.com/jakobringler/blog/tree/hugo/content/notes/sharedfiles/ExtractTransformationMatrix.hiplc)\n\n--- \n\n## Warping Space\n\n### Twisting\n\n![[notes/images/MatrixTwist.gif]]\n\n```C#\nmatrix xform = ident();\nvector bbox = getbbox_size(0);\nvector center = getbbox_center(0);\nvector axis = chv(\"axis\");\n\nfloat min = center.z - bbox.z / 2;\nfloat max = center.z + bbox.z / 2;\n\nfloat rotations = chf(\"rotations\");\n\nfloat angle = fit(@P.z, min, max, -PI*rotations, PI*rotations);\n\nrotate(xform, angle, axis);\n\n@P *= xform;\n```\n\n### Black Hole Vortex\n\nJohn Kunz demonstrated this technique in his [Pure VEX Workshop Week 6](https://www.youtube.com/watch?v=DA0ZuIJ-W7s). \n\n![[notes/images/Pasted image 20220604182753.png]]\n\n```C#\nmatrix xform = ident();\n\nvector angle = (1.0 / exp(length(@P)))*chv(\"rotationscale\");\nfloat scale = pow(1 - 1 / exp(length(@P)), 5);\nvector translatedir = chv(\"translatedir\")*chf(\"translatescale\");\nvector translate = set(translatedir.x, translatedir.y, translatedir.z) / exp(length(@P));\n\nrotate(xform, angle.x, set(1,0,0) );\nrotate(xform, angle.y, set(0,1,0) );\nrotate(xform, angle.z, set(0,0,1) );\n\nscale(xform, scale);\n\ntranslate(xform, translate);\n\n@P *= xform;\n```\n\n---\n\nsources / further reading\n- [Linear Transformations - 3Blue1Brown](https://www.3blue1brown.com/lessons/linear-transformations)\n- [Houdini Tutorial | Extracting transformation matrix with VEX - Paweł Rutkowski](https://vimeo.com/284712920)\n- [Pure VEX Workshop Week 6: Warping with Matrices - John Kunz](https://www.youtube.com/watch?v=DA0ZuIJ-W7s)\n- [Houdini Translate Rotate Scale Bend with Matrices \u0026 Quaternions in VEX - Nodes of Nature](https://www.youtube.com/watch?v=e9qLWS2La28)\n- [Matrix Transformation- Mohamad Salame](https://www.artstation.com/blogs/mohamad_salame1/v6eP/matrix-transformation)\n\n","lastmodified":"2023-02-23T20:02:01.225120389Z","tags":null},"/notes/NVIDIAs-Warp-for-Houdini":{"title":"NVIDIAs Warp for Houdini","content":"\n\"NVIDIA Warp is a Python framework that gives coders an easy way to write GPU-accelerated, kernel-based programs in NVIDIA Omniverse™ and OmniGraph.\" - https://developer.nvidia.com/warp-python\n\nChristopher Crouzet built an HDA that exposes the Warp framework to Houdini.\n\nhttps://github.com/christophercrouzet/nvidia-warp-houdini\n","lastmodified":"2023-02-23T20:02:01.225120389Z","tags":null},"/notes/Op-Operators":{"title":"Op Operators","content":"\n### Summary\n\n\"[Op Operators I will Never Memorize](https://www.artstation.com/blogs/mohamad_salame1/DlQG/op-operators-i-will-never-memorize)\" is a fantastic blog post by Mohamad Salame that summarizes all the obscurities and pitfalls you will face when having to deal with the `op` syntax.","lastmodified":"2023-02-23T20:02:01.225120389Z","tags":null},"/notes/Other":{"title":"Other","content":"\n### Nuke\n- [[notes/cat Files |cat Files]]\n\n### Redshift\n- [[notes/Redshift |Redshift]]\n\n### DaVinci Resolve\n- [[notes/Python Scripting in Resolve |Python Scripting in Resolve]]\n- [[notes/Lua Scripting in Resolve |Lua Scripting in Resolve]]\n\n### Bash \u0026 Git\n- [[notes/Bash Basics |Bash Basics]]\n- [[notes/Git Basics |Git Basics]]\n \n### Obsidian / Quartz\n- [[notes/Gifs for Obsidian |How to create Gifs for Obsidian on Linux]]","lastmodified":"2023-02-23T20:02:01.225120389Z","tags":null},"/notes/Projects-and-RnD":{"title":"Projects / R\u0026D","content":"\n## Projects\n- [[notes/ML Castles |ML  Castles]]\n\t- [[notes/Tower Sketcher |Tower Sketcher]]\n\t- [[notes/Vegetation and Erosion Prediction |Vegetation Erosion Prediction]]\n\n## R\u0026D\n### Machine Learning\n- [[notes/Digit Recognition in Houdini |Digit Recognition in Houdini]]","lastmodified":"2023-02-23T20:02:01.225120389Z","tags":null},"/notes/Python-In-Houdini":{"title":"Python In Houdini","content":"\n## Autocomplete for Imported Libraries\nTo get autocomplete for external libraries import the packages in the Houdini Python Shell before using any of them in e.g. a Python SOP or an HDA Python Module.\n\n---\n\nsources / further reading:\n- [Python Autocomplete Trick - Richard C Thomas](https://twitter.com/doescg/status/1560999925940371456)\n\n","lastmodified":"2023-02-23T20:02:01.225120389Z","tags":null},"/notes/Python-Scripting-in-Resolve":{"title":"Python Scripting in Resolve","content":"\n## Setup\n\n### Environment Variables\nWhen setting up the API access on windows with environment variables make sure to NOT use nested variables as python will read those as strings. \n\nInstead of using the variables as shown in the provided README.txt from Black Magic Design make sure to replace all nested variables with hardcoded paths.\n\nWindows:\n\n```bash\nRESOLVE_SCRIPT_API=\"C:\\\\ProgramData\\\\Blackmagic Design\\\\DaVinci Resolve\\\\Support\\\\Developer\\\\Scripting\\\\\"\nRESOLVE_SCRIPT_LIB=\"C:\\\\Program Files\\\\Blackmagic Design\\\\DaVinci Resolve\\\\fusionscript.dll\"\nPYTHONPATH=\"%PYTHONPATH%;C:\\\\ProgramData\\\\Blackmagic Design\\\\DaVinci Resolve\\\\Support\\\\Developer\\\\Scripting\\\\Modules\\\\\"\n```\n\nExplained here: [Python scripting error - Blackmagic Forum](https://forum.blackmagicdesign.com/viewtopic.php?f=21\u0026t=137340)\n\n### Imp Module\n\n\n\n---\n\nsources / further reading:\n- [Unofficial DaVinci Resolve Scripting Documentation](https://deric.github.io/DaVinciResolve-API-Docs/)\n- [Python scripting error - Blackmagic Forum](https://forum.blackmagicdesign.com/viewtopic.php?f=21\u0026t=137340)\n\n","lastmodified":"2023-02-23T20:02:01.225120389Z","tags":null},"/notes/Quaternion-Euler-Rotations":{"title":"Quaternion \u0026 Euler Rotations","content":"\n### Quaternions\n\nexpressed as 4 numbers `vector4 = [x, y, z, w]`\n\nIt's usually used to define rotational transformation in 3D Space. To do so it needs 2 types of information: \n- rotational angle   $\\theta$\n- rotational axis   $A$\n\nThe 4 vector values of a quaternion are calculated in the following way:\n\n$q = (sin(\\frac{\\theta}{2})*Ax, sin(\\frac{\\theta}{2})*Ay, sin(\\frac{\\theta}{2})*Az, cos(\\frac{\\theta}{2}))$\n\nIn VEX we can use the quaternion function which accepts an angle in radians and an axis vector to propagate the vector4 accordingly.\n\n### Rotating Vectors\n\n```C#\n//this goes in a point wrangle\n\nfloat angle = chf(\"angle\");\nvector axis = normalize(chv(\"axis\"));\n\nvector4 rot = quaternion(radians(angle), axis);\n@P = qrotate(rot, @P);\n```\n\n### Euler Rotation\n\nWhile Quaternians define the rotational transformation with an angle around a specified axis, Euler rotation is defined by 3 Parameters (compare `Transform Node` x, y, z).\n\nTo convert Euler rotations to quaternions we need to specify the rotation order:\n\n```C#\nvector angles = chv(\"angles\");\nangles = radians(angles);\n\nint order = XFORM_XYZ; // integer arguments are defined in $HH/vex/include/math.h\n\nvector4 rot = eulertoquaternion(angles, order);\n\np@quat = rot;\n```\n\nRotation Order Integer Arguments as defined in `$HH/vex/include/math.h`:\n\n```C++\n#define XFORM_XYZ 0 // Rotate order X, Y, Z\n#define XFORM_XZY 1 // Rotate order X, Z, Y\n#define XFORM_YXZ 2 // Rotate order Y, X, Z\n#define XFORM_YZX 3 // Rotate order Y, Z, X\n#define XFORM_ZXY 4 // Rotate order Z, X, Y\n#define XFORM_ZYX 5 // Rotate order Z, Y, X\n```\n\nSame thing works backwards:\n\n```C#\nvector4 quat = p@quat;\n\nvector euler = quaterniontoeuler(quat, XFORM_XYZ);\n\nv@euler = degrees(euler);\n```\n\n\n### Blending Quaternions with `slerp()`\n\nMatrices can do most of what quaternions can do and more (translation \u0026 scale). However, one thing that quaternions enable you to do is using the `slerp` function to blend smoothly between two rotational transformations.\n\n![[notes/images/QuaternionSlerpCut.gif]]\n\nIn this example the two orientations get initialized buy rotating a line in two different ways and extracting each quaternion.\n\n```C#\n// this goes in point wrangle \"quat_1 \u0026 2\"\n\nfloat angle = chf(\"angle\");\nvector axis = normalize(chv(\"axis\"));\n\nvector4 rot = quaternion(radians(angle), axis);\n@P = qrotate(rot, @P);\n\np@quat = rot;\n```\n\nThen we can blend rotationally between the two orientations with the `slerp` function and apply the blended result.\n\n```C#\n// this goes in point wrangle  \"slerp\"\n\nvector4 quat1 = point(1, \"quat\", 1);\nvector4 quat2 = point(2, \"quat\", 1);\n\nvector4 rot = slerp(quat1, quat2, chf(\"blend\"));\n\n@P = qrotate(rot, @P);\n@N = qrotate(rot, @N);\n```\n\n##### Download: [File](https://github.com/jakobringler/blog/tree/hugo/content/notes/sharedfiles/QuaternionSlerp.hiplc)\n\n### Using `dihedral` Function to Orient Vectors\n\nThe dihedral function creates a quaternion that describes the rotational transformation between two given vectors. This can be used to switch between two orientations of a mesh.\n\n![[notes/images/Pasted image 20220604005136.png]]\n```C#\nvector v1 = normalize(point(1, \"P\", 1));\nvector v2 = normalize(point(2, \"P\", 1));\n\nvector4 quat = dihedral(v1, v2);\n\n@P = qrotate(quat, @P);\n```\n\n### sources /  further reading\n- [[VEX for Algorithmic Design] E14 _ Quaternion Basics - \nJunichiro Horikawa](https://www.youtube.com/watch?v=MYRtwY-DQV8)\n- [Visualizing quaternions - Grant Sanderson (3blue1brown)](https://eater.net/quaternions)\n\n### Related\n- [[notes/Matrix Operations |Matrix Operations]]","lastmodified":"2023-02-23T20:02:01.225120389Z","tags":null},"/notes/Resources":{"title":"Resources","content":"# Downloads \u0026 Scripts\n\n- [VEX Snippets](https://github.com/jakobringler/H_VEX_snippets)\n\n- [ML Castles](https://github.com/jakobringler/H_ML_Castles/)\n- [Pytorch Digit Recognition in Houdini](https://github.com/jakobringler/H_pytorch_digitrecognition)\n\n---\n\n# Links\n\n## CG \u0026 VFX\n\n### Houdini\n##### Tutorials\n- [Entagma - Moritz Schwind \u0026 Manuel Casasola Merkle](https://entagma.com/) procedural \u0026 motion design\n- [VEX for Algorithmic Design - Junichiro Horikawa](https://www.youtube.com/playlist?list=PLzRzqTjuGIDhiXsP0hN3qBxAZ6lkVfGDI) VEX, procedural design\n\n##### Blogs \u0026 Wikis\n- [cgwiki - Matt Estela](https://www.tokeru.com/cgwiki/index.php?title=Houdini) all things houdini\n- [procegen - Konstantin Magnus](https://procegen.konstantinmagnus.de/) procedural workflows, automation\n- [wiki - John Kunz](https://wiki.johnkunz.com/index.php?title=Main_Page) VEX, resources\n- [Toadstorm Nerdblog - Henry Foster](https://www.toadstorm.com/blog/) MOPs, procedural workflows \u0026 python\n- [Houdini Gubbins](https://houdinigubbins.wordpress.com/) technical, VEX, math, geometry, algorithms\n- [FX Thinking - Alessandro Pepe](https://pepefx.blogspot.com/) FX, technical\n- [Website / Wiki - Deborah R. Fowler](https://www.deborahrfowler.com/index.html) very technical (this has to be the worst best website)\n- [Diffuse FX - Grayden Solman](https://diffusefx.com/) FX, technical\n- [Blog - Nick Taylor (Aeoll)](https://www.nicholas-taylor.com/blog) FX, technical, motion design\n- [Blog - Jake Rice](https://jakerice.design/blog/) VEX, math, technical\n- [Blog - Sergen Eren](https://sergeneren.com/) FX, technical, clouds, photon simulation\n- [Blog - Rok Andic](https://www.rokandic.com/blog) rigging, animation\n- [Blog - Chris Turner](https://www.chrisbturner.com/blog) technical\n- [Blog - Jason Harmon (What I Found)](https://whatifound.net/) FLIP, CHOPs\n- [lex.ikoon](https://lex.ikoon.cz/) VEX, Python, technical\n- [rendereverything - Gatis Kurzemnieks](https://www.rendereverything.com/blog/) VEX, technical\n- [1 Minute VEX - Aaron Smith](https://aaronsmith.tv/1-Minute-VEX) VEX\n- [Houdini Tutorials Tailored for Mathematicians - Discretization - TU Berlin](http://wordpress.discretization.de/houdini/) math, technical\n- [Blog - Discretization - Visualization Course at TU Berlin](http://wordpress.discretization.de/ddg2018/) math, technical\n- [Daily Hip - Eetu](https://dailyhip.wordpress.com/) technical, hip files\n- [Crowds Plus - Thomas K Christensen](https://crowdsplus.notion.site/)\n- [The Brain Extension - Iiro Kivistö](https://www.thebrainextension.com/) grooming, CFX\n- [Creature Garage - JesusFC](https://creaturegarage.com/) grooming\n- [Atom's Link Page - OdForce](https://forums.odforce.net/topic/25173-atoms-link-page/?tab=comments#comment-146668) - useful link list\n\n##### Tech\n- [[notes/NVIDIAs Warp for Houdini |NVIDIAs Warp for Houdini]]\n- [Julia Wrangle in Houdini](https://github.com/pedohorse/yuria)\n- [HoudiniToTaichi](https://github.com/taichi-dev/taichi_houdini)\n\n##### Comparisons\n**FLIP**\n- [Houdini Flip Sim Flat Tank Particle Separation Comparison - Anthony Juno Han](https://www.youtube.com/watch?v=Zvjlg0m0ZlY)\n- [Houdini Flip Simulation Particle Fluid Surface Comparison - Anthony Juno Han](https://www.youtube.com/watch?v=4a3N2qeOF2Y)\n**Whitewater**\n- [Houdini | Whitewater tests - Attila Siops](https://www.youtube.com/watch?v=nW1pxpAw-4Y)\n- [Houdini | Beach Wave Whitewater tests (hip) - Attila Siops](https://www.youtube.com/watch?v=a38RFtpeLqc)\n- [Houdini | Rock Splash tests (comparison) - Attila Siops](https://www.youtube.com/watch?v=8sb_z2fl2hY)\n**Pyro**\n- [Houdini Pyro FX - Explosion comparison. - Cg Art School : CAS](https://www.youtube.com/watch?v=eMQYLipwFiM)\n- [Houdini Sparse Pyro FX - Campfire comparison. - Cg Art School : CAS](https://www.youtube.com/watch?v=grsev1LXOF0)\n- [Houdini Pyro FX - Billowy smoke comparison. - Cg Art School : CAS](https://www.youtube.com/watch?v=A3o2ZD_S5xE)\n\n### Misc \n- [Physically Based](https://physicallybased.info/) material value database\n\n---\n\n## Math\n- [Essence of Linear Algebra - 3Blue1Brown](https://www.3blue1brown.com/topics/linear-algebra) theory\n- [The Beauty of Bézier Curves - Freya Holmér](https://www.youtube.com/watch?v=aVwxzDHniEw) theory\n- [Math Primer](https://aman.ai/primers/math/) theory, overview\n\n---\n\n## Deep Learning\n\n### Houdini\n- [Houdini Machine Learning - Edmond Boulet-Gilly](https://www.youtube.com/watch?v=WNEEokEq-Fg\u0026list=PLSie_1zkANDbn7wCD9kifPAp5wJmok02V) ML, PyTorch, technical\n\n### Theory\n- [Casual GAN Papers](https://www.casualganpapers.com/) theory, papers\n- [Aladdin Persson](https://www.youtube.com/c/AladdinPersson) + [Github Collection](https://github.com/aladdinpersson/Machine-Learning-Collection) theory, paper review, pytorch \u0026 tensorflow tutorials\n- [Shervine Amidi - Deep Learning Cheat Sheet](https://stanford.edu/~shervine/teaching/) theory\n\n### Courses\n- [ML YouTube Courses](https://github.com/dair-ai/ML-YouTube-Courses) \n\n---\n\n## Computer Science \n\n### Courses\n- [Open Source Society University - Path to a free self-taught education in Computer Science!](https://github.com/ossu/computer-science)\n- [Tutorialspoint - Algorithms and Datastructures](https://www.tutorialspoint.com/data_structures_algorithms/)\n\n### Libraries\n- [The Computational Geometry Algorithms Library](https://www.cgal.org/index.html)\n\n---\n\n# Tools\n\n## Workflow\n\n### Pipeline\n- [Prism Pipeline](https://prism-pipeline.com/) open source\n\n### Automation\n- [Power Automate for Win10/11](https://powerautomate.microsoft.com/en-us/) like iOS shortcuts, visual automation programming\n\n### QoL Tools\n- [Advanced Renamer](https://www.advancedrenamer.com/) file renamer\n- [Pure Ref](https://www.pureref.com/) reference board\n\n---\n","lastmodified":"2023-02-23T20:02:01.225120389Z","tags":null},"/notes/Scripting-in-Houdini":{"title":"Scripting in Houdini - Talk Notes","content":"\nThese are my personal notes about Paul Ambrosiussen's Talk [Python Scripting - Houdini](https://www.youtube.com/watch?v=CxoVzsxiruY\u0026t=2605s).\n\n### Writing Code\nuse an external editor for anything longer than a couple of lines\n\n##### Node Parameter Editor\n- worst way\n- limited space\n- copy pasting to external editors for improved python features is prone to errors\n\n##### Expression Editor\n- okayish\n- more space\n- limited editor features\n- same copy pasting problem\n- useful in PDG \u003e\u003e displays most common pdg python functions in a column\n\n##### External Editor\n- install SideFX Labs to be able to link an external editor (Sublime, VS Code etc.) to write code\n- VS Code has a VEX language extension to enable auto complete\n\n### Raising Errors, Warnings \u0026 Messages\nErrors and Warnings are displayed in the node's info section while Messages trigger a popup window \n\n```Python\nerror = \"Error!\"\n\nif not something:\n\traise hou.NodeError(error)\n```\n\n```Python\nwarning = \"Warning?\"\n\nif not something:\n\traise hou.NodeWarning(warning)\n```\n\n```Python\nmessage = \"Message.\"\n\nif not something:\n\traise hou.ui.displayMessage(message)\n```\n\n### Run, Execute \u0026 Communicate with Thrid Party Applications\n\n##### Subprocess\nlibrary that ships with Python and lets you run other programs\n\n```Python\nimport subprocess\n```\n\n##### CMD Strings\nTo run another program you have to build a command (cmd) string. Essentially a single commandline snippet that runs some executable with all the necessary parameters.\n\n```Python\nexecutablepath = \"path/to/program.exe\"\nvalue = 5 # some value from Houdini\n\ncmd = [executablepath]\n\nif something:\n\tcmd.append(\"-p\") # append a parameter\n\tcmd.append(value) #parameter value\n```\n\nThis results in the following cmd string: `path/to/program.exe -p 5`\n\n##### Running the Subprocess\nto run the command you can use the `call()` function\n\n```Python\n# disable IM dialog box (windows specific)\nsi = None\nif os.name == 'nt':\n\tsi = subprocess.STARTUPINFO()\n\tif hide_dialog:\n\t\tsi.dwFlags != subprocess.STARTF_USESHOWWINDOW\n\nsubprocess.call(cmd, startupinfo=si)\n```\n\nIn case you want to get some geometry back this function overwrites any input geo and returns the new one instead.\n\n```Python\ngeo.loadFromFile(path)\n```\n\n### Run Code Based on UI Events\n[Relevant Doc Pages](https://www.sidefx.com/docs/houdini/hom/locations.html#asset_modules)\n\nWhen building HDAs it's possible to use python callbacks to trigger scripts with custom buttons or on events such as `OnCreated()` or `OnInputChanged()`. For a full list of events have a look at the [DOCs](https://www.sidefx.com/docs/houdini/hom/locations.html#asset_events).\n\n### Shelf Tools\nEasiest way is to select a node tree and drag and drop the nodes on an empty shelf spot. this will automatically create all the necessary script to recreate the setup on the push of the shelf button. Unfortunately this creates quite messy and bloated code.\n\nTo write it yourself you can start by creating a 'New Tool' on a shelf and importing the hou module. To easily find all the necessary functions, and python objects you can drag and drop nodes inside the scripting panel which will give you the correct syntax to access the data.\n\n### Pre and Post Save\nyou can trigger scripts before and after a hip file is saved adding code to `HOUDINIPATH/scripts/beforescenesave.py \u0026 afterscenesave.py` -\u003e [DOCS](https://www.sidefx.com/docs/houdini/hom/locations.html#run-scripts-before-and-or-after-saving-the-scene-hip-file)\n\n### Processing Node Network / Script Analysis\nCounting how often each node gets used (useful to figure out support and update importance in bigger studios):\n\n```Python\nimport hou\nfrom collections import Counter\n\nparentnode = hou.node(\"/obj/geo1\")\nallnodes = parentnode.children()\n\nnodenames = [x.type().name() for x in allnodes]\n\nprint(Counter(nodenames))\n```\n\n### Dropdown Menus\nEvery Houdini Menu is described by a .xml file that describes how it's constructed and what items it consists of. Take a look at SideFX Labs `MainMenuCommon.xml`.\n\nPython Scripts can be added in an xml in the following way:\n\n```xml\n\u003csubmenu id=\"name_menu\"\u003e\n\t\u003cscriptItem id=\"itemid\"\u003e\n\t\t\u003clabel\u003eLABEL\u003c/label\u003e\n\t\t\u003cinsertAtIndex\u003e10\u003c/insertAtIndex\u003e\n\t\t\u003cscriptCode\u003e\n\t\t\t\u003c![CDATA[\n\t\t\tPYTHONSCRIPT\n\t\t\t]]\u003e\n\t\t\u003c/scriptCode\u003e\n\t\u003c/scriptItem\u003e\n\u003c/submenu\u003e\n```\n\n### Startup Scripts\ncan be used to sanity check or load default scenes etc. on startup\n\n`pythonrc.py` runs on startup (as many as found in $HOUDINIPATH)\n\n`123.py` runs when Houdini is started without a scene (only first found)\n\n`456.py` runs after a scenefile is loaded (only first found)\n\n\n---\n\nsources / further reading:\n- [Python Scripting - Houdini - Paul Ambrosiussen](https://www.youtube.com/watch?v=CxoVzsxiruY\u0026t=2605s)\n\n\n","lastmodified":"2023-02-23T20:02:01.225120389Z","tags":null},"/notes/Setting-up-Anaconda-and-Houdini-for-3D-Deep-Learning-on-Linux":{"title":"Setting up Anaconda and Houdini for 3D Deep Learning on Linux","content":"\n### Installation\n\nTo get started install [Anaconda](https://anaconda.org/) and run the following commands in your terminal:\n\n( **hou** is the name of the new enviroment and python **3.7.4** is required because this is the version used in Houdini )\n\n```bash\nconda create -n hou python=3.7.4\n```\n\n```bash\nconda activate hou\n```\n\nThen install libraries like for example [PyTorch 3D](https://github.com/facebookresearch/pytorch3d). ( For simplicities sake we will go forward with vanilla [PyTorch](https://pytorch.org/). )\n\n```bash\nconda install pytorch torchvision torchaudio cudatoolkit=11.3 -c pytorch\n```\n\nAs [jpparkeramnh](https://www.sidefx.com/profile/jpparkeramnh/) pointed out in [this](https://www.sidefx.com/forum/topic/58397/) SideFX forum post you have to export the **LD_PRELOAD** variable.\n\n```bash\nexport LD_PRELOAD=$CONDA_PREFIX/lib/libpython3.7m.so\n```\n\n### .bashrc Modifications\n\nI also recommend sourcing Houdini in the terminal.\n\nTo do so first open the .bashrc in the terminal\n\n```bash\nnano .bashrc\n```\n\nand add the following lines to your .bashrc\n\n```bash\ncd /opt/hfs19.0/\nsource ./houdini_setup\ncd ~\nconda activate hou\nexport LD_PRELOAD=$CONDA_PREFIX/lib/libpython3.7m.so\nalias expenv='LD_PRELOAD=$CONDA_PREFIX/lib/libpython3.7m.so'\n```\n\n-   The first 3 lines run the houdini setup bash script\n-   Line 4 activates a default environment ( for me “hou” )\n-   Line 5 exports the LD_PRELOAD varible of the currently activated environment ( hou )\n-   Line 6 creates an alias to export the currently activated environment from the terminal\n\nNow you should be able to just activate your respecitve conda environment, export the correct LD_PRELOAD variable by typing “**expenv**” and then run houdini from there by typing “**houdini**“.\n\nTo check if everything is running as expected open the Houdini Python shell and type:\n\n```python\nimport torch \n```\n\nIf it doesn’t give you any errors you should be good to go.\n\n\n","lastmodified":"2023-02-23T20:02:01.225120389Z","tags":null},"/notes/Today-I-Learned":{"title":"Today I Learned","content":"\nThe following is a compilation of all sorts of handy houdini tips \u0026 tricks that were shared in the #today-i-learned channel on the [Think Procedural Discord Server](https://thinkprocedural.com/).\nDo yourself a favour and check it out an scroll to the top of the thread to find some hidden secrets!\n\n## Quality of Life\n\n### Network \n- Pressing `8` in the network view toggles wire auto connection on and off (very handy if you move nodes around and don't want to mess up your setups)\n- Drag a wire in the middle of an unconnected node to instantly wire up in- **and** output\n- Drag \u0026 drop a camera node in the viewport to look through that camera\n- You can save geometry of any node through the right click menu\n\n### Viewport\n- `Ctrl` or `Shift` + `Arrow Keys` let's you rotate / move views\n- `M` enables first person movement with `WASD`, `Shift` to sprint, `Ctrl` to slowdown and `Q` / `E` to lift / descend\n\n---\n\nsources / further reading:\n- [Think Procedural Discord Server](https://thinkprocedural.com/)\n\n","lastmodified":"2023-02-23T20:02:01.225120389Z","tags":null},"/notes/Tower-Sketcher":{"title":"Tower Sketcher","content":"\n## Training a Neural Net to Understand Sketches\nThis project is part of [[notes/ML Castles |ML Castles]] and was created for my bachelor's thesis.\n\n### Concept\nThe basic idea was to create an HDA and train a neural net to translate rough pixel sketches into parameter values that produce the drawn shape when entered in the HDA.\n\n![[notes/images/towerHDAconcept.png]]\n\n### HDA - Procedural Tower Generator\nThe base of the system is this very simple HDA that generates a single tower. The user can set different parameters to control the shape. The Asset outputs a 3D model and a 2D sketch derived from the model.\n\n![[notes/images/towersample.png]]\n\n![[notes/images/towerBaseBreakdown.png]]\n// base breakdown\n\n![[notes/images/towerroofbreakdown.png]]\n// roof breakdown\n\n![[notes/images/towerComparsion_.png]]\n// roof types\n\n### Setup\nTo create the necessary training data I used PDG. It's pretty straight forward to create almost infinite random variations of an HDA output and write them, or any part of their data, to disk. I generated 10.000 image-parameter pairs to train the network. The training process was also done inside of PDG in a python script node. The network was a combination of a [[notes/Convolutional Neural Networks (CNNs) |CNN]] and a [[notes/Feed Forward Networks (FFNs) |FNN]].\n \n![[notes/images/setuptowerhda(2).jpg |400]]\n\nThe Inference process (Predicting new results) was done in SOPs by running an Image ([[notes/Abusing Heightfields as Fast Image Canvas |stored on a heightfield/2D Volume]]) through a python SOP and feeding the predicted parameters back in the HDA.\n\n### Data Synthesis and PDG\nAs mentioned above the data generation was done in PDG. The setup is pretty straight forward:\n- create `n` wedges for the parameters you want to randomize\n- randomized values get stored in the pdg attribute stream\n- add slight offsets to sketch lines (noise) to get a more general/robust model\n- render out 2d sketch of resulting tower\n- fetch image path and attributes in python script and begin training\n\nHere is a sample of the dataset:\n\n![[notes/images/TowerDataset.png]]\n\n### Results\n![[notes/images/TowerSketcher.gif]]\n// gif plays at 3x speed\n\n![[notes/images/towerSketchdemo.png]]\n\nSince all the resulting values get clamped to a plausible range every sketch outputs a somewhat reasonable tower, which results in those rather incoherent pairs:\n\n ![[notes/images/towerSketchdemo2.png]]\n ","lastmodified":"2023-02-23T20:02:01.225120389Z","tags":null},"/notes/UsefulMathNumbers":{"title":"Useful Math Functions \u0026 Numbers","content":"\n### Functions\n- [[notes/WaveExpressions |Wave  Expressions]]\n\n---\n\n### Golden Ratio\n\nRatio between two numbers that equals approximately: 1.618\n\n$\\frac{a+b}{a}=\\frac{a}{b}$\n\n### Golden Angle\n\n$\\phi= 137.5 \\degree$ - very useful when creating organic flowery stuff. Have a look at [this](https://entagma.com/td-essentials-create-a-swept-phyllotaxis-operator-in-houdini/) awesome video from Entagma for more information.\n\n$\\frac{360\\degree -137,5\\degree}{137,5\\degree}\\approx 1.618$\n\n### Fibonacci Sequence\n\n$F_1=F_2=1$       $F_n=F_{n-1} + F_{n-2}$\n\n0  1  1  2  3  5  8  13  21  34  55  89  144  233  377  610  987 ...\n\n---\n\n### VEX Constants\n\n[John Kunz](https://wiki.johnkunz.com/index.php?title=Mathematical_Functions_in_VEX) pointed out these constants that can be used in any VEX wrangle:\n\n```C++\n// defined in: $HFS/houdini/vex/include/math.h  \n\nM_E         2.7182818    // Euler's number\nLN10        2.3025850    // logarithm of 10\nLN2         0.6931471    // logarithm of 2\nLOG10E      0.4342944\nLOG2E       1.4426950\nPI          3.1415926    // 180° in radians\nM_TWO_PI    6.2831852    // 360° in radians\nPI_2        1.5707963    // 90° in radians\nPI_4        0.7853981    // 45° in radians\nSQRT1_2     0.7071067\nSQRT2       1.4142135\nTOLERANCE   0.0001\n\n// SOURCE: John Kunz's Wiki \n```\n\n","lastmodified":"2023-02-23T20:02:01.225120389Z","tags":null},"/notes/VELLUM":{"title":"VELLUM","content":"\n## Cloth\n\n### Stiff \u0026 Crumply (Paper, Metal, etc.)\nKey Parameters:\n- Constraint Iterations (higher = stiffer)\n- Plasticity (prevents unfolding)\n- High Bend Stiffness\n- Disable Compression Stiffness\n- Enable Stiffness Dropoff (Decreasing)\n\nAdditional Tricks:\n- Automatically group sharp corners and use the resulting 'crease' group in a subdivision node to maintain sharpness\n\n### Intersections\nWhen dealing with intersections on layered cloth the 'post collision passes' parameter can help. A good rule of thumb is setting them slightly above the number of expected layers (collisions with itself) of cloth.\n\n![[notes/images/layersofcloth.png]]\n\nIn this example where two cloth folds form I would count 4 possible collisions and probably set 'post collision passes' to 5.\n\n\n## Hair\n\n### Collisions\nTo fix jittering and collision issues on hair roots the `disableexternal` attribute can be useful.\n\n```C\nif(@curveu == 0)\n{\n\ti@disableexternal = 1;\n}\n```\n\nsimilarly `i@disableself = 1` can be used to avoid collisions with itself.\n\n## Fluids\n### Droplets, Sheets \u0026 Tendrils\nsame rules as described in [[notes/FLIP#Droplets Sheets Tendrils |FLIP]] apply.\n\n\n---\n\nsources / further reading:\n- [Houdini vellum edge threads details - Tutorial - Linus Rosenqvist](https://www.youtube.com/watch?v=3IidlkG-VmM)\n- [Crumple Effects in Houdini Vellum using Bend Stiffness and Plasticity - regularmenthol](https://www.youtube.com/watch?v=64ujNBGQ7P8)\n- [Houdini Quicktip: Vellum Creasing - Dave Stewart](https://vimeo.com/601670425)\n- [disableexternal - sideFX Forum](https://www.sidefx.com/forum/topic/60379/?page=1)\n\n\n","lastmodified":"2023-02-23T20:02:01.225120389Z","tags":null},"/notes/VEX-Snippets":{"title":"VEX Snippets","content":"\n## Wrangle Cheat Sheet\n\u003eI try my best to credit and link to any sources. That being said, some of those are pretty old and I have no idea where they came from.\n\u003e\n\u003eI recommend installing this handy python panel to manage your own snippet collection: [Vex Snippet Library](https://github.com/dchow1992/Vex_Snippet_Library)\n\n### Alembic Path to Groups\n//primitive wrangle\n\n```C\nstring name[] = split(s@path, \"/\");\n\nforeach (string s; name){\n    setprimgroup(0, s, @primnum, 1, \"set\");\n} \n```\n\n### Angle between 2 Vectors\n//point wrangle \n\n```C\nfloat angle = degrees(acos(dot(normalize(vector1), normalize(vector2))));\n```\n\n### Attribute Min Max\n// point wrangle\n\n```C\nfloat value;\nfloat values[];\nstring attrname = \"name\";\nfloat max_value;\nfloat min_value;\n\nfor (int i=0; i\u003c@numpt; i++)\n{\n\tvalue = point(geoself(), attrname, i);\n\tappend(values,value);\n}\n\nmin_value = min(values);\nmax_value = max(values);\n\nf[]@range;\n\n@range[0] = min_value;\n@range[1] = max_value;\n```\n\n### Attribute to String\n// point wrangle\n\n```C\ns@name = \"piece_\" + itoa(i@class);\n```\n\n### Attribute Transfer\n// point wrangle\n\n```C\nint posprim;\nvector param_uv;\nfloat maxdist = 10;\nfloat dist = xyzdist(1,@P,posprim,param_uv,maxdist);\nvector pos = primuv(1,\"rest\",posprim,param_uv);\nv@rest = pos;\n```\n\n### Average Point Cloud Positions\n// point wrangle\n\n```C\nvector value;\nvector values[];\n\nfor (int i=0; i\u003c@numpt; i++)\n{\n\tvalue = point(geoself(), \"P\", i);\n\tappend(values,value);\n}\n  \nvector avgP = avg(values);\n\nif(@ptnum\u003e0)\n{\n\tremovepoint(geoself(), @ptnum);\n} \n\n@P = avgP;\n```\n\n### Bias and Gain\n// point wrangle\n\n```C\nfunction float bias(float val; float bias) \n{\n    return (val / ((((1.0/bias) - 2.0)*(1.0 - val))+1.0));\n}\n\nfunction float gain(float val; float gain) \n{\n    if(val \u003c 0.5)\n    {\n        return bias(val * 2.0,gain)/2.0;\n    }\n    else\n    {\n        return bias(val * 2.0 - 1.0,1.0 - gain)/2.0 + 0.5;\n    }\n}\n\nfloat val = pow(val, exp); \n```\n\n\u003e [!quote] **Sources:**\n\u003e \n\u003e [Michael Frederickson's Tweet](https://twitter.com/mfrederickson/status/1523148417349816320)\n\u003e \n\u003e [Alan Wolfe's Blog Post](https://blog.demofox.org/2012/09/24/bias-and-gain-are-your-friend/)\n\n### Bounding Box\n// point wrangle\n\n```C\nvector bbox = getbbox_size(0);\nvector bbox_max = getbbox_max(0);\nvector bbox_min = getbbox_min(0);\nvector bbox_center = getbbox_center(0);\n  \nfloat xsize = getbbox_size(0).x;\nfloat y_max = getbbox_max(0).y;\nfloat z_min = getbbox_min(0).z;\n```\n\n### Camera Position and Direction\n// point wrangle\n\n```C\nstring cam = chs(\"cam\");\nmatrix camXform = optransform(cam); \nvector cpos;\nvector cdir;\nvector cup;\n\ncpos = cracktransform(0, 0, 0, {0,0,0}, camXform);\ncdir = vtransform(cam,\"space:world\", {0,0,-1});\ncup = vtransform(cam,\"space:world\", {0,1,0});\n\nv@P = cpos;\nv@N = cdir;\nv@up = cup;\n```\n\n### Collision Check and Deintersection with SDF VDB\n// point wrangle\n\n```C\nvector gradient = volumegradient(1, \"surface\", v@P); \nfloat surface = volumesample(1, \"surface\", v@P);\n\nif(surface \u003c chf(\"dist\"))\n{\n\tv@P += normalize(gradient) * abs(surface);\n}\n```\n\n### Edgefalloff\n// point wrangle\n\n```C\nif (@edgefalloff==1)\n{\n\tint near[] = nearpoints(0,@P,chf(\"dist\"));\n\t\n\tforeach (int pnt;near)\n\t{\n\t\tvector pntP = point(0,\"P\",pnt);\n\t\tfloat dist = fit(distance(pntP,@P),0,chf(\"dist\")*2,1,-1);\n\t\tsetpointattrib(0,\"edgefalloff\",pnt,dist,\"set\");\n\t}\n}\n```\n\n### Expand Group Over Geo\n// point wrangle\n\n```C\nint pc = pcopen(0, 'P', @P, chf('radius'), chi('maxpts'));\n\nwhile (pciterate(pc) \u003e 0)\n{\n\tint currentpt;\t\n\tpcimport(pc, 'point.number', currentpt);\n\tsetpointgroup(0, 'group1', currentpt, 1);\n}\n```\n\n### Extract Tranformation Matrix\n// point wrangle\n\n```C\nvector P1 = point(0, \"P\", 0);\nvector P2 = point(0, \"P\", 1);\nvector up = {0,1,0};\n\nvector X = normalize(P2-P1);\nvector Z = normalize(cross(up, X));\nvector Y = normalize(cross(X, Z));\n\nvector P = P1 + (P2 - P1) / 2;\n\nmatrix transform = set(X, Y, Z, P);\n\nsetcomp(transform, 0, 0, 3); \nsetcomp(transform, 0, 1, 3);\nsetcomp(transform, 0, 2, 3); \n\n4@transform = transform;\n```\n\nHave a look at [[notes/Matrix Operations |this note]] for more information on how it's used.\n\n### Flow Vector around Geometry\n// point wrangle\n\n```C\n vector up = chv(\"up\"); // usually 0, 1, 0 for Y  \n vector norm = normalize(v@N);  \n vector c1 = cross(norm, up);  \n vector c2 = cross(norm, c1);  \n v@revolve = c1;\n v@flow = c2;\n```\n\n### Group by N Connections\n// point wrangle\n\n```C\nint n = chi(\"Neighbours\");\n\nif (neighbourcount (0, @ptnum) \u003e n)\n{\n\tsetpointgroup (0, \"grouped\", @ptnum, 1);\n}\n```\n\n### Gravity on Curves (Hanging Cables)\n// point wrangle\n\n```C\nfloat stiffness = clamp(chf(\"stiffness\"), 0, 0.99);\nfloat u = @curveu * (1 - @curveu) * 4;\nu = pow( 1 - u, (1 / (1 - stiffness)));\n\n@P.y *= clamp(fit01(gradient, (1 - ch(\"gravity\")), 1), 0, 1);\n```\n\n\u003e [!quote] **Sources:**\n\u003e \n\u003e [Chris Turner's Tweet](https://twitter.com/allexceptn/status/1488954032425213958)\n\n### Helix from Line\n// point wrangle\n\n```C\n  float freq = chf(\"freq\");\n  float amp = chf(\"amp\");\n  vector pos = @P;\n  \n  pos.x += sin(@P.y * freq) * amp;\n  pos.z += cos(@P.y * freq) * amp;\n  @P = pos;\n```\n\n### Isolate Overlapping Points\n// point wrangle\n\n```C\nint near[] = pcfind(0, \"P\", @P, 0.0001, 2);\n\nif(len(near) \u003e 1)\n{\n\tsetpointgroup(0, \"double\", @ptnum, 1);\n}\n```\n\n### Name Attribute for each Prim Group\n// point wrangle\n\n```C\nstring grps[] = detailintrinsic(0, 'primitivegroups');\nforeach(string g; grps)\n{\n\taddprimattrib(0, g, 123);\n}\n```\n\n### Normalize @age\n// point wrangle\n\n```C\n@normage = @age / @life;\n```\n\n### Orientation Template for Copy\n// point wrangle\n\n```C\n@up = {0,1,0};\n@orient = quaternion(maketransform(@N,@up));\nvector4 rot_Y = quaternion(radians(ch('Y')),{0,1,0});\n@orient = qmultiply(@orient, rot_Y);\n```\n\n### Point Density\n// point wrangle\n\n```C \nfloat maxdist = chf(\"maxdist\");  \nint maxpts = chi(\"maxpts\");  \nint points = len(nearpoints(0, @P, maxdist, maxpts));  \n  \nf@density = float(points) / maxpts;\n```\n\n### Remove Point by Condition\n// point wrangle\n\n[Mai Ao](https://twitter.com/aomai01) compared two point deletion methods, where method 1 gives a 15x speed increase over the traditional `removepoint()` function\n\n1. group points first and blast group in another step\n\n```C\nfloat half_cone_rad = radians(chf(\"half_cone\"));\n@group_to_delete = acos(dot(@P, {0,0,1})) \u003c= half_cone_rad;\n```\n\n2. removepoint()\n\n```C\nfloat half_cone_rad = radians(chf(\"half_cone\"));\n\nif(acos(dot(@P, {0,0,1})) \u003c= half_cone_rad)\n{\n\tremovepoint(0, @ptnum);\n}\n```\n\n\u003e [!quote] **Sources:**\n\u003e \n\u003e [Mai Ao's Tweet](https://twitter.com/aomai01/status/1514226273794641925/photo/1)\n\n### Remove Point Percentage\n// point wrangle\n\n```C\nint percentage = ch('percentage'); \n\nif(@ptnum % 100 \u003c percentage)\n{\n\tremovepoint(0, @ptnum );\n}\n```\n\n### Rotate Vector\n// point wrangle\n\n```C\nfloat angle = chf(\"angle\");\nvector axis = normalize(chv(\"axis\"));\n\nvector4 rot = quaternion(radians(angle), axis);\n@P = qrotate(rot, @P);\n```\n\n### Sharpen Point Cloud\n// point wrangle\n\n```C\nint handle = pcopen(0, \"P\", @P, chf(\"radius\"), chi(\"maxpoints\"));\nv@P = pcfilter(handle, \"P\");\n```\n\n### Vector Flow on Objects\n// point wrangle\n\n```C\nvector pos = v@P * chf(\"scale\");\nvector dir = curlnoise2d(pos + @Time * chf(\"time\"));\nmatrix3 mat = dihedral(set(0,0,1), v@N);\ndir *= mat;\n\nv@v = dir;\n```\n\n### Wave Expressions\n\n[[notes/WaveExpressions |Summary]] of different useful periodic functions like square or sawtooth\n\n","lastmodified":"2023-02-23T20:02:01.225120389Z","tags":null},"/notes/Vector-Shenanigans":{"title":"Vector Shenanigans","content":"\n### Vector Flow on Objects\n\n![[notes/images/vectorflowonobject.png]]\n\n```C\nvector pos = v@P * chf(\"scale\");\nvector dir = curlnoise2d(pos + @Time * chf(\"time\"));\nmatrix3 mat = dihedral(set(0,0,1), v@N);\ndir *= mat;\n\nv@v = dir;\n```\n\n---\n\n- related / sources:","lastmodified":"2023-02-23T20:02:01.225120389Z","tags":null},"/notes/WaveExpressions":{"title":"Wave Expressions","content":"\n## Useful Periodic Functions\n\nI recently stumbled across [this](https://www.cameroncarson.com/nuke-wave-expressions) phenomenal summary of wave expressions by Cameron Carson. Check it out! He wrote everything for Nuke so I decided to build a similar little library for VEX and adjust the necessary syntax / functions.\n\n---\n\nEvery wrangle runs on a 10 unit long resampled line along the z-axis and includes this base code to setup the parameters:\n\n```C\nfloat offset = chf(\"offset\");\nfloat wavelength = chf(\"waveLength\");\nfloat max = chf(\"max\");\nfloat min = chf(\"min\");\n```\n\n### Random\n\n![[notes/images/vexwaves.1.jpg]]\n\n```C\n@P.y = random((@P.z+offset)/wavelength) * (max-min) + min;\n```\n\n### Noise\n\n![[notes/images/vexwaves.2.jpg]]\n\n```C\n@P.y = noise((@P.z+offset)/wavelength) * (max-min) + min;\n```\n\n### Sin\n\n![[notes/images/vexwaves.3.jpg]]\n\n```C\n@P.y = (sin((@P.z+offset)/wavelength)+1)/2 * (max-min) + min;\n```\n\n### Triangle\n\n![[notes/images/vexwaves.4.jpg]]\n\n```C\n@P.y = (asin(sin(2*PI*(@P.z+offset)/wavelength))/PI+0.5) * (max-min) + min;\n```\n\n### Square\n\n![[notes/images/vexwaves.5.jpg]]\n\n```C\n@P.y = rint((sin(2*PI*(@P.z+offset)/wavelength)+1)/2) * (max-min) + min;\n```\n\n### Sawtooth\n\n![[notes/images/vexwaves.6.jpg]]\n\n```C\n@P.y = ((@P.z+offset) % wavelength)/wavelength * (max-min) + min;\n```\n\n### Sawtooth Parabolic\n\n![[notes/images/vexwaves.7.jpg]]\n\n```C\n@P.y = sin((PI*(@P.z+offset)/(2*wavelength)) % (PI/2)) * (max-min) + min;\n```\n\n### Sawtooth Parabolic Reversed\n\n![[notes/images/vexwaves.8.jpg]]\n\n```C\n@P.y = cos((PI*(@P.z+offset)/(2*wavelength)) % (PI/2)) * (max-min) + min;\n```\n\n### Sawtooth Exponential\n\n![[notes/images/vexwaves.9.jpg]]\n\n```C\n@P.y = (exp(2*PI*((@P.z+offset) % wavelength)/wavelength)-1)/exp(2*PI) * (max-min) + min;\n```\n\n### Sawtooth Exponential Reversed\n\n![[notes/images/vexwaves.9.5.jpg]]\n\n```C\n@P.y = (exp(2*PI*(1-(((@P.z+offset) % wavelength)/wavelength)))-1)/exp(2*PI) * (max-min) + min;\n```\n\n### Bounce\n\n![[notes/images/vexwaves.10.jpg]]\n\n```C\n@P.y = abs(sin(PI*(@P.z + offset)/wavelength))* (max-min) + min;\n```\n\n### Blip\n\n![[notes/images/vexwaves.11.jpg]]\n\n```C\nfloat bliplength = chf(\"bliplength\");\nfloat value = ((@P.z+(offset+wavelength)) % (wavelength+bliplength)/(wavelength)) * (wavelength/bliplength) - (wavelength/bliplength);\n\nif(value \u003e 0)\n{\n    value = 1;\n}\n\n@P.y = fit01(value, min, max);\n```\n\n\n\nsources / further reading:\n- [Nuke Wave Expressions - Cameron Carson](https://www.cameroncarson.com/nuke-wave-expressions)\n- [List of Periodic Functions - Wikipedia](https://en.wikipedia.org/wiki/List_of_periodic_functions)\n\n\n","lastmodified":"2023-02-23T20:02:01.225120389Z","tags":null},"/notes/cat-Files":{"title":"cat Files","content":"\n[.cat Files](https://learn.foundry.com/nuke/developers/13.2/catfilecreationreferenceguide/introduction.html) enable the user to deploy pretrained pytorch models directly into Nuke\n\n","lastmodified":"2023-02-23T20:02:01.225120389Z","tags":null},"/notes/primuv-and-xyzdist":{"title":"primuv and xyzdist","content":"\n### sources / further reading\n- [The joy of xyzdist() and primuv() - Toadstorm](https://www.toadstorm.com/blog/?p=465)\n- [Joy Of Vex 19 - cgwiki](https://www.tokeru.com/cgwiki/index.php?title=JoyOfVex19) \n- [1 Minute VEX II - Aaron Smith](https://aaronsmith.tv/1-Minute-VEX-II)\n\n\n","lastmodified":"2023-02-23T20:02:01.561122167Z","tags":null}}