<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>math on</title><link>https://fxnotes.xyz/tags/math/</link><description>Recent content in math on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://fxnotes.xyz/tags/math/index.xml" rel="self" type="application/rss+xml"/><item><title>Matrix Operations</title><link>https://fxnotes.xyz/notes/Matrix-Operations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fxnotes.xyz/notes/Matrix-Operations/</guid><description>Basics Dimensions Houdini most commonly uses 3x3 or 4x4 matrices to store transformation data
3x3 -&amp;gt; rotation and scale 4x4 -&amp;gt; rotation, scale and translation</description></item><item><title>Measuring Error</title><link>https://fxnotes.xyz/notes/Measuring-Error/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fxnotes.xyz/notes/Measuring-Error/</guid><description>There are several common ways to measure error mathematically, especially in the context of machine learning and statistics. Here are a few of the most widely used methods:</description></item><item><title>Quaternion &amp; Euler Rotations</title><link>https://fxnotes.xyz/notes/Quaternion-Euler-Rotations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fxnotes.xyz/notes/Quaternion-Euler-Rotations/</guid><description>Quaternions expressed as 4 numbers vector4 = [x, y, z, w]
It&amp;rsquo;s usually used to define rotational transformation in 3D Space.</description></item><item><title>RMSE</title><link>https://fxnotes.xyz/notes/RMSE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fxnotes.xyz/notes/RMSE/</guid><description>Root Mean Squared Error (RMSE) is a widely used metric in statistics and machine learning to evaluate the accuracy of a model&amp;rsquo;s predictions.</description></item><item><title>Strange Attractors</title><link>https://fxnotes.xyz/notes/Strange-Attractors/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fxnotes.xyz/notes/Strange-Attractors/</guid><description>![[notes/images/strangeattractors.png]]
//pointwrangle &amp;ldquo;starting_conditions&amp;rdquo; (used the values in each comment)
1 2 3 4 @a = chf(&amp;#34;sigma&amp;#34;); // 10 @b = chf(&amp;#34;rho&amp;#34;); // 28 @c = chf(&amp;#34;beta&amp;#34;); // 8/3 @dt = ch(&amp;#34;dt&amp;#34;); // 0.</description></item><item><title>Useful Math Functions &amp; Numbers</title><link>https://fxnotes.xyz/notes/UsefulMathNumbers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fxnotes.xyz/notes/UsefulMathNumbers/</guid><description>Functions [[notes/WaveExpressions |Wave Expressions]] Golden Ratio Ratio between two numbers that equals approximately: 1.618
$\frac{a+b}{a}=\frac{a}{b}$
Golden Angle $\phi= 137.</description></item><item><title>Vector Shenanigans</title><link>https://fxnotes.xyz/notes/Vector-Shenanigans/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fxnotes.xyz/notes/Vector-Shenanigans/</guid><description>Vector Flow on Objects ![[notes/images/vectorflowonobject.png]]
// point wrangle
1 2 3 4 5 6 vector pos = v@P * chf(&amp;#34;scale&amp;#34;); vector dir = curlnoise2d(pos + @Time * chf(&amp;#34;time&amp;#34;)); matrix3 mat = dihedral(set(0,0,1), v@N); dir *= mat; v@v = dir; related / sources:</description></item><item><title>Wave Expressions</title><link>https://fxnotes.xyz/notes/WaveExpressions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fxnotes.xyz/notes/WaveExpressions/</guid><description>Useful Periodic Functions I recently stumbled across this phenomenal summary of wave expressions by Cameron Carson. Check it out! He wrote everything for Nuke so I decided to build a similar little library for VEX and adjust the necessary syntax / functions.</description></item></channel></rss>