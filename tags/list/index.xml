<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>list on</title><link>https://fxnotes.xyz/tags/list/</link><description>Recent content in list on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://fxnotes.xyz/tags/list/index.xml" rel="self" type="application/rss+xml"/><item><title>Deep Learning</title><link>https://fxnotes.xyz/notes/Deep-Learning/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fxnotes.xyz/notes/Deep-Learning/</guid><description>ML Basics for Technical 3D Artists / TDs: Concepts: [[notes/Tensors |Tensors]] [[notes/Gradient Descent |Gradient Descent]] [[notes/Back Propagation |Back Propagation]] Model Archtiectures [[notes/Feed Forward Networks (FFNs) |Feed Forward Networks (FFNs)]] [[notes/Convolutional Neural Networks (CNNs) |Convolutional Neural Networks (CNNs)]] [[notes/Generative Adversarial Networks (GANs) |Generative Adversarial Networks (GANs)]] [[notes/Recurrent Neural Networks (RNNs) |Recurrent Neural Networks (RNNs)]] Data Data Synthesis Data Augmentation Noise Realistic Applications Compress Algorithms Increase Usabiliy &amp;amp; Accessability Setup Guides: [[notes/Setting up Anaconda and Houdini for 3D Deep Learning on Linux |Setting up Anaconda and Houdini for 3D Deep Learning on Linux]] Houdini DL &amp;ldquo;Hacks&amp;rdquo;: [[notes/Abusing Heightfields as Fast Image Canvas |Abusing Heightfields as Fast Image Canvas]] Projects &amp;amp; Examples: [[notes/Digit Recognition in Houdini |Digit Recognition in Houdini]] Sketch to Tower Vegetation &amp;amp; Erosion Wave Function Collapse Prediction Neural Cellular Automata</description></item><item><title>Houdini</title><link>https://fxnotes.xyz/notes/Houdini/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fxnotes.xyz/notes/Houdini/</guid><description>SOPs: VEX: [[notes/VEX Snippets |VEX Snippets]] [[notes/Matrix Operations |Matrix Operations]] Deep Learning: [[notes/Setting up Anaconda and Houdini for 3D Deep Learning on Linux |Setting up Anaconda and Houdini for 3D Deep Learning on Linux]] [[notes/Abusing Heightfields as Fast Image Canvas |Abusing Heightfields as Fast Image Canvas]]</description></item><item><title>Other</title><link>https://fxnotes.xyz/notes/Other/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fxnotes.xyz/notes/Other/</guid><description>Nuke: Color Grading:</description></item><item><title>Resources</title><link>https://fxnotes.xyz/notes/Resources/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fxnotes.xyz/notes/Resources/</guid><description>Downloads &amp;amp; Scripts: [[notes/VEX Snippets |VEX Snippets]]
Links: CG &amp;amp; VFX Houdini: cgwiki - Matt Estela procegen - Konstantin Magnus Grooming: The Brain Extension - Iiro Kivist√∂ Math: Essence of Linear Algebra - 3Blue1Brown Deep Learning Houdini: Houdini Machine Learning - Edmond Boulet-Gilly</description></item><item><title>VEX Snippets</title><link>https://fxnotes.xyz/notes/VEX-Snippets/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fxnotes.xyz/notes/VEX-Snippets/</guid><description>Wrangle Cheat Sheet Attribute Min Max 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 float value; float values[]; string attrname = &amp;#34;name&amp;#34;; float max_value; float min_value; for (int i=0; i&amp;lt;@numpt; i++) { value = point(geoself(), attrname, i); append(values,value); } min_value = min(values); max_value = max(values); f[]@range; @range[0] = min_value; @range[1] = max_value; Attribute to String 1 s@name = &amp;#34;piece_&amp;#34; + itoa(i@class); Attribute Transfer 1 2 3 4 5 6 int posprim; vector param_uv; float maxdist = 10; float dist = xyzdist(1,@P,posprim,param_uv,maxdist); vector pos = primuv(1,&amp;#34;rest&amp;#34;,posprim,param_uv); v@rest = pos; Average Point Cloud Positions 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 vector value; vector values[]; for (int i=0; i&amp;lt;@numpt; i++) { value = point(geoself(), &amp;#34;P&amp;#34;, i); append(values,value); } vector avgP = avg(values); if(@ptnum&amp;gt;0) { removepoint(geoself(), @ptnum); } @P = avgP; Bias and Gain 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 function float bias(float val; float bias) { return (val / ((((1.</description></item></channel></rss>